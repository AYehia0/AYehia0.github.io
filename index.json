[{"categories":["hacking","linux"],"content":"Attempting to solve CanYouHackIt Challenge.","date":"2023-12-01","objectID":"/posts/can_you_hack_it/","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/"},{"categories":["hacking","linux"],"content":"This is my attempt to solve the “Can you hack it?” Challenge. I will share the solutions and how to achieve thme, without spoiling the secrets. ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:0:0","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#"},{"categories":["hacking","linux"],"content":" Can you hack it?What da heck is Can you hack it? challenge?. Can you hack it? is a challenge hosted by AIS - ainfosec to give participants a chance to join the team. Score a total of 700 points to unlock the ability to submit your score. Your score submission and email will be sent directly to AIS and someone will be in touch. I like challenges, that’s why I am trying to give it a shot, while I might not solve them all, but I will be learning alot by time I give up. Before getting started!!! Before reading this blog, first give it a try, and come for solutions if you get stuck. ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:1:0","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#can-you-hack-it"},{"categories":["hacking","linux"],"content":" How to play?Navigate to the challenge and hover over a challenge tile to flip it. Once a challenge is solved the points will appear in the top right. You may need to refresh the page to update the points depending on how you solved the challenge. ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:2:0","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#how-to-play"},{"categories":["hacking","linux"],"content":" CategoriesThe challenge has many categories with different difficulties based on the score number (the bigger, the harder):- Client-side Protections Networking Crypto Steganography Exploitation Reverse Engineering Input Validation Programming ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:0","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#categories"},{"categories":["hacking","linux"],"content":" Client-side Protections DisabledThat’s really easy and stright-forward challenge. button is disabled on the HTML, so just edit that html tag. Button ClickerThat’s really interesting one, first I tried to click the button using js: for (let i = 0; i \u003c 999999999; i++) { document.querySelector(\"#id_of_button\").click() } and yeah, as expected my browser crashed lol. After some time playing with the console (which sometimes can contain the answer!), I found the source code for ButtonClicker. Button Clicker Source Code setting ButtonClicker_num_clicks with the desired number solves this one. Weird InputThis one is funny, coz there is a js function which changes the input to ‘a’s. Just as the previous one, make this function do nothing and you will be able to solve it. Weird Input, aaaaaaaaa! Paid ContentThis challenge taught me a lot, coz I was searching in the wrong direction. I first checked the source code as usual (and it didn’t look that great). Wtf is that? then I inspected the network and the response I found looked like this: { \"error\": \"You're not a paid user.\", \"hc_challenge\": { \"oid\": \"08be3a909cb31a4f2e80\", \"meta\": { \"points\": 50, \"challenge_id\": \"paid_content\", \"name\": \"Paid Content\", \"description\": \"Pay for things you want! (2.0!!!)\", \"prompt\": \"You must be a paid user to proceed.\", \"category\": { \"value\": \"client_side_protections\", \"name\": \"Client-side Protections\" }, \"console_message\": \"[Paid Content]: This challenge got a minor update for the 2023 holidays. It's version 2.0. It's (2 * challenge)!\", \"mobile_friendly\": false, \"encoded\": true, \"error_msg\": \"You're not a paid user.\", \"version\": \"2.0\", \"inputs\": [], \"retired\": false, \"bin_hashes\": null }, \"solved\": false, \"js_file\": \"...\", \"js_function\": \"PaidContent\", \"num_solves\": 1945, \"paid\": false, \u003c--------- Can you spot this ? \"challenge\": 1964 } } can you see it ?, if I could just set this to true before making the request, that would be it. Yes, you can edit the JS code! ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:1","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#client-side-protections"},{"categories":["hacking","linux"],"content":" Client-side Protections DisabledThat’s really easy and stright-forward challenge. button is disabled on the HTML, so just edit that html tag. Button ClickerThat’s really interesting one, first I tried to click the button using js: for (let i = 0; i \u003c 999999999; i++) { document.querySelector(\"#id_of_button\").click() } and yeah, as expected my browser crashed lol. After some time playing with the console (which sometimes can contain the answer!), I found the source code for ButtonClicker. Button Clicker Source Code setting ButtonClicker_num_clicks with the desired number solves this one. Weird InputThis one is funny, coz there is a js function which changes the input to ‘a’s. Just as the previous one, make this function do nothing and you will be able to solve it. Weird Input, aaaaaaaaa! Paid ContentThis challenge taught me a lot, coz I was searching in the wrong direction. I first checked the source code as usual (and it didn’t look that great). Wtf is that? then I inspected the network and the response I found looked like this: { \"error\": \"You're not a paid user.\", \"hc_challenge\": { \"oid\": \"08be3a909cb31a4f2e80\", \"meta\": { \"points\": 50, \"challenge_id\": \"paid_content\", \"name\": \"Paid Content\", \"description\": \"Pay for things you want! (2.0!!!)\", \"prompt\": \"You must be a paid user to proceed.\", \"category\": { \"value\": \"client_side_protections\", \"name\": \"Client-side Protections\" }, \"console_message\": \"[Paid Content]: This challenge got a minor update for the 2023 holidays. It's version 2.0. It's (2 * challenge)!\", \"mobile_friendly\": false, \"encoded\": true, \"error_msg\": \"You're not a paid user.\", \"version\": \"2.0\", \"inputs\": [], \"retired\": false, \"bin_hashes\": null }, \"solved\": false, \"js_file\": \"...\", \"js_function\": \"PaidContent\", \"num_solves\": 1945, \"paid\": false, \u003c--------- Can you spot this ? \"challenge\": 1964 } } can you see it ?, if I could just set this to true before making the request, that would be it. Yes, you can edit the JS code! ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:1","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#disabled"},{"categories":["hacking","linux"],"content":" Client-side Protections DisabledThat’s really easy and stright-forward challenge. button is disabled on the HTML, so just edit that html tag. Button ClickerThat’s really interesting one, first I tried to click the button using js: for (let i = 0; i \u003c 999999999; i++) { document.querySelector(\"#id_of_button\").click() } and yeah, as expected my browser crashed lol. After some time playing with the console (which sometimes can contain the answer!), I found the source code for ButtonClicker. Button Clicker Source Code setting ButtonClicker_num_clicks with the desired number solves this one. Weird InputThis one is funny, coz there is a js function which changes the input to ‘a’s. Just as the previous one, make this function do nothing and you will be able to solve it. Weird Input, aaaaaaaaa! Paid ContentThis challenge taught me a lot, coz I was searching in the wrong direction. I first checked the source code as usual (and it didn’t look that great). Wtf is that? then I inspected the network and the response I found looked like this: { \"error\": \"You're not a paid user.\", \"hc_challenge\": { \"oid\": \"08be3a909cb31a4f2e80\", \"meta\": { \"points\": 50, \"challenge_id\": \"paid_content\", \"name\": \"Paid Content\", \"description\": \"Pay for things you want! (2.0!!!)\", \"prompt\": \"You must be a paid user to proceed.\", \"category\": { \"value\": \"client_side_protections\", \"name\": \"Client-side Protections\" }, \"console_message\": \"[Paid Content]: This challenge got a minor update for the 2023 holidays. It's version 2.0. It's (2 * challenge)!\", \"mobile_friendly\": false, \"encoded\": true, \"error_msg\": \"You're not a paid user.\", \"version\": \"2.0\", \"inputs\": [], \"retired\": false, \"bin_hashes\": null }, \"solved\": false, \"js_file\": \"...\", \"js_function\": \"PaidContent\", \"num_solves\": 1945, \"paid\": false, \u003c--------- Can you spot this ? \"challenge\": 1964 } } can you see it ?, if I could just set this to true before making the request, that would be it. Yes, you can edit the JS code! ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:1","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#button-clicker"},{"categories":["hacking","linux"],"content":" Client-side Protections DisabledThat’s really easy and stright-forward challenge. button is disabled on the HTML, so just edit that html tag. Button ClickerThat’s really interesting one, first I tried to click the button using js: for (let i = 0; i \u003c 999999999; i++) { document.querySelector(\"#id_of_button\").click() } and yeah, as expected my browser crashed lol. After some time playing with the console (which sometimes can contain the answer!), I found the source code for ButtonClicker. Button Clicker Source Code setting ButtonClicker_num_clicks with the desired number solves this one. Weird InputThis one is funny, coz there is a js function which changes the input to ‘a’s. Just as the previous one, make this function do nothing and you will be able to solve it. Weird Input, aaaaaaaaa! Paid ContentThis challenge taught me a lot, coz I was searching in the wrong direction. I first checked the source code as usual (and it didn’t look that great). Wtf is that? then I inspected the network and the response I found looked like this: { \"error\": \"You're not a paid user.\", \"hc_challenge\": { \"oid\": \"08be3a909cb31a4f2e80\", \"meta\": { \"points\": 50, \"challenge_id\": \"paid_content\", \"name\": \"Paid Content\", \"description\": \"Pay for things you want! (2.0!!!)\", \"prompt\": \"You must be a paid user to proceed.\", \"category\": { \"value\": \"client_side_protections\", \"name\": \"Client-side Protections\" }, \"console_message\": \"[Paid Content]: This challenge got a minor update for the 2023 holidays. It's version 2.0. It's (2 * challenge)!\", \"mobile_friendly\": false, \"encoded\": true, \"error_msg\": \"You're not a paid user.\", \"version\": \"2.0\", \"inputs\": [], \"retired\": false, \"bin_hashes\": null }, \"solved\": false, \"js_file\": \"...\", \"js_function\": \"PaidContent\", \"num_solves\": 1945, \"paid\": false, \u003c--------- Can you spot this ? \"challenge\": 1964 } } can you see it ?, if I could just set this to true before making the request, that would be it. Yes, you can edit the JS code! ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:1","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#weird-input"},{"categories":["hacking","linux"],"content":" Client-side Protections DisabledThat’s really easy and stright-forward challenge. button is disabled on the HTML, so just edit that html tag. Button ClickerThat’s really interesting one, first I tried to click the button using js: for (let i = 0; i \u003c 999999999; i++) { document.querySelector(\"#id_of_button\").click() } and yeah, as expected my browser crashed lol. After some time playing with the console (which sometimes can contain the answer!), I found the source code for ButtonClicker. Button Clicker Source Code setting ButtonClicker_num_clicks with the desired number solves this one. Weird InputThis one is funny, coz there is a js function which changes the input to ‘a’s. Just as the previous one, make this function do nothing and you will be able to solve it. Weird Input, aaaaaaaaa! Paid ContentThis challenge taught me a lot, coz I was searching in the wrong direction. I first checked the source code as usual (and it didn’t look that great). Wtf is that? then I inspected the network and the response I found looked like this: { \"error\": \"You're not a paid user.\", \"hc_challenge\": { \"oid\": \"08be3a909cb31a4f2e80\", \"meta\": { \"points\": 50, \"challenge_id\": \"paid_content\", \"name\": \"Paid Content\", \"description\": \"Pay for things you want! (2.0!!!)\", \"prompt\": \"You must be a paid user to proceed.\", \"category\": { \"value\": \"client_side_protections\", \"name\": \"Client-side Protections\" }, \"console_message\": \"[Paid Content]: This challenge got a minor update for the 2023 holidays. It's version 2.0. It's (2 * challenge)!\", \"mobile_friendly\": false, \"encoded\": true, \"error_msg\": \"You're not a paid user.\", \"version\": \"2.0\", \"inputs\": [], \"retired\": false, \"bin_hashes\": null }, \"solved\": false, \"js_file\": \"...\", \"js_function\": \"PaidContent\", \"num_solves\": 1945, \"paid\": false, \u003c--------- Can you spot this ? \"challenge\": 1964 } } can you see it ?, if I could just set this to true before making the request, that would be it. Yes, you can edit the JS code! ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:1","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#paid-content"},{"categories":["hacking","linux"],"content":" Networking HTTP BasicThat’s another easy and stright-forward challenge. Download the http-auth.cap and open it with wireshark (not that doo doo doo), and filter all POST (http.request.method == \"POST\") requests (coz you know post requests usually contains data to be sent!). Wireshark doo doo doo, sorry :D WPA2 DeauthHacking networks!, the good old days. In this challenge I used aircrack-ng coz why not? Extract info from .cap aircrack-ng ./de-auth.cap Cracking the password, and here I wasted lot of time trying to find where I put my wordlists lol (for future me, the path is : /usr/share/hack/). I love when I find the needle in the hay stack! ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:2","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#networking"},{"categories":["hacking","linux"],"content":" Networking HTTP BasicThat’s another easy and stright-forward challenge. Download the http-auth.cap and open it with wireshark (not that doo doo doo), and filter all POST (http.request.method == \"POST\") requests (coz you know post requests usually contains data to be sent!). Wireshark doo doo doo, sorry :D WPA2 DeauthHacking networks!, the good old days. In this challenge I used aircrack-ng coz why not? Extract info from .cap aircrack-ng ./de-auth.cap Cracking the password, and here I wasted lot of time trying to find where I put my wordlists lol (for future me, the path is : /usr/share/hack/). I love when I find the needle in the hay stack! ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:2","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#http-basic"},{"categories":["hacking","linux"],"content":" Networking HTTP BasicThat’s another easy and stright-forward challenge. Download the http-auth.cap and open it with wireshark (not that doo doo doo), and filter all POST (http.request.method == \"POST\") requests (coz you know post requests usually contains data to be sent!). Wireshark doo doo doo, sorry :D WPA2 DeauthHacking networks!, the good old days. In this challenge I used aircrack-ng coz why not? Extract info from .cap aircrack-ng ./de-auth.cap Cracking the password, and here I wasted lot of time trying to find where I put my wordlists lol (for future me, the path is : /usr/share/hack/). I love when I find the needle in the hay stack! ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:2","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#wpa2-deauth"},{"categories":["hacking","linux"],"content":" Crypto Skip CipherThis challenge is easy as it clearly says the cipher, so with quick search you will find many online tools to decode, I used this. EncodedThat’s a kinda interesting one, it says Encoding is not cryptography! (2.0!!! Now with even more layers!). At the first glance I thought about that mores code challenge on hackthebox, and it was close (many layers). 504b0304140000000800308281576ed34a1e5c0000005c00000008000000666c61672e74787405c1c10e83200c00d0cf5a3c96c6a106b354d4aab7ed02acb8193501ffdef7286eff57ff546c979ec9653609a0c2194a8019c0812629062c8d7475b48dcd72ea4b7f31ad9c99d2d8caded23bf80faebe31e121e187be562a1c93bb01504b01021403140000000800308281576ed34a1e5c0000005c000000080000000000000000000000800100000000666c61672e747874504b0506000000000100010036000000820000000000 This looks like a zip format, so let’s extract the data inside: st = \"...\" binary_data = bytes.fromhex(st) with open(\"output.zip\", \"wb\") as f: f.write(binary_data) After extracting the data it show flag.txt which contains base64 string, trying to decode it gives some trash string (but it’s not!): BZh91AY\u0026SY�\u0001\u0004�@�@�`�0�\u0006i fux\u0011g+ͅ\u0010W85-F)6cedYh\u0015E\u000e\u001164Smf\u0008Ck=knU+\u003e.p!c as you can see bz, another compression. Let’s extract again (this time using bash): echo \"$base64_encoded_string\" | base64 --decode | bzcat \u003e output.txt output.txt contains binary (greatet’s convert it to ASCII: 666c61677b677572666c652a6865316c302f7730726c645f6e756c6c5f40666b3d7375646f7d Now we have HEX lol (it’s convert it to ASCII again): echo \"$hex_string\" | xxd -r -p Finally we get the flag: flag{gurfle*he1l0/***********} ENIGMAThis is really badass challenge!, i wasted too much time in it and I could solve but there are what you should do to be able to solve it properly: Inspecting the console, gives us some hints (that’s where you should always start from) Hints but at what cost! Let’s analysis those hints: QK JO LU XG DV looks like plugboard wiring map. UKW B is indeed the reflector being used. 3 of 5 Rotors it’s not clear what does that mean but I guess it’s the number of used rotors. First 5 digits of Pi that’s another ambiguous hint, but it could be the (ring settings/Position setting) as \"3 14 15\" Metasploit Acquired by Rapid7 hmm the date?!, Metasploit acquired by Rapid7 on 20 Oct, 2009 so (ring settings/Position setting) could be (\"20 10 09\", \"10 20 09\"). there is another possiblity but I just ignored it. How to solve online ? There are many possiblities and permutations to try, so it’s better to write a code for that from itertools import permutations from string import ascii_uppercase def enigma_decrypt(encrypted_message, rotor_order, reflector_type, plugboard_settings, initial_positions): rotor_wirings = { 'I': 'EKMFLGDQVZNTOWYHXUSPAIBRCJ', 'II': 'AJDKSIRUXBLHWTMCQGZNPYFVOE', 'III': 'BDFHJLCPRTXVZNYEIWGAKMUSQO', 'IV': 'ESOVPZJAYQUIRHXLNFTGKDCMWB', 'V': 'VZBRGITYUPSDNHLXAWMJQOFECK' } reflector_wirings = { 'UKW-B': 'YRUHQSLDPXNGOKMIEBFZCWVJAT' } plugboard = {char: char for char in ascii_uppercase} plugboard.update(plugboard_settings) rotor_positions = {rotor: initial_positions.split()[i] for i, rotor in enumerate(rotor_order.split())} decrypted_message = '' for char in encrypted_message: if char in plugboard: char = plugboard[char] for rotor, position in rotor_positions.items(): char = rotor_wirings[rotor][(ord(char) - ord('A') + ord(position) - ord('A')) % 26] char = reflector_wirings[reflector_type][ord(char) - ord('A')] for rotor, positio","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:3","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#crypto"},{"categories":["hacking","linux"],"content":" Crypto Skip CipherThis challenge is easy as it clearly says the cipher, so with quick search you will find many online tools to decode, I used this. EncodedThat’s a kinda interesting one, it says Encoding is not cryptography! (2.0!!! Now with even more layers!). At the first glance I thought about that mores code challenge on hackthebox, and it was close (many layers). 504b0304140000000800308281576ed34a1e5c0000005c00000008000000666c61672e74787405c1c10e83200c00d0cf5a3c96c6a106b354d4aab7ed02acb8193501ffdef7286eff57ff546c979ec9653609a0c2194a8019c0812629062c8d7475b48dcd72ea4b7f31ad9c99d2d8caded23bf80faebe31e121e187be562a1c93bb01504b01021403140000000800308281576ed34a1e5c0000005c000000080000000000000000000000800100000000666c61672e747874504b0506000000000100010036000000820000000000 This looks like a zip format, so let’s extract the data inside: st = \"...\" binary_data = bytes.fromhex(st) with open(\"output.zip\", \"wb\") as f: f.write(binary_data) After extracting the data it show flag.txt which contains base64 string, trying to decode it gives some trash string (but it’s not!): BZh91AY\u0026SY�\u0001\u0004�@�@�`�0�\u0006i fux\u0011g+ͅ\u0010W85-F)6cedYh\u0015E\u000e\u001164Smf\u0008Ck=knU+\u003e.p!c as you can see bz, another compression. Let’s extract again (this time using bash): echo \"$base64_encoded_string\" | base64 --decode | bzcat \u003e output.txt output.txt contains binary (greatet’s convert it to ASCII: 666c61677b677572666c652a6865316c302f7730726c645f6e756c6c5f40666b3d7375646f7d Now we have HEX lol (it’s convert it to ASCII again): echo \"$hex_string\" | xxd -r -p Finally we get the flag: flag{gurfle*he1l0/***********} ENIGMAThis is really badass challenge!, i wasted too much time in it and I could solve but there are what you should do to be able to solve it properly: Inspecting the console, gives us some hints (that’s where you should always start from) Hints but at what cost! Let’s analysis those hints: QK JO LU XG DV looks like plugboard wiring map. UKW B is indeed the reflector being used. 3 of 5 Rotors it’s not clear what does that mean but I guess it’s the number of used rotors. First 5 digits of Pi that’s another ambiguous hint, but it could be the (ring settings/Position setting) as \"3 14 15\" Metasploit Acquired by Rapid7 hmm the date?!, Metasploit acquired by Rapid7 on 20 Oct, 2009 so (ring settings/Position setting) could be (\"20 10 09\", \"10 20 09\"). there is another possiblity but I just ignored it. How to solve online ? There are many possiblities and permutations to try, so it’s better to write a code for that from itertools import permutations from string import ascii_uppercase def enigma_decrypt(encrypted_message, rotor_order, reflector_type, plugboard_settings, initial_positions): rotor_wirings = { 'I': 'EKMFLGDQVZNTOWYHXUSPAIBRCJ', 'II': 'AJDKSIRUXBLHWTMCQGZNPYFVOE', 'III': 'BDFHJLCPRTXVZNYEIWGAKMUSQO', 'IV': 'ESOVPZJAYQUIRHXLNFTGKDCMWB', 'V': 'VZBRGITYUPSDNHLXAWMJQOFECK' } reflector_wirings = { 'UKW-B': 'YRUHQSLDPXNGOKMIEBFZCWVJAT' } plugboard = {char: char for char in ascii_uppercase} plugboard.update(plugboard_settings) rotor_positions = {rotor: initial_positions.split()[i] for i, rotor in enumerate(rotor_order.split())} decrypted_message = '' for char in encrypted_message: if char in plugboard: char = plugboard[char] for rotor, position in rotor_positions.items(): char = rotor_wirings[rotor][(ord(char) - ord('A') + ord(position) - ord('A')) % 26] char = reflector_wirings[reflector_type][ord(char) - ord('A')] for rotor, positio","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:3","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#skip-cipher"},{"categories":["hacking","linux"],"content":" Crypto Skip CipherThis challenge is easy as it clearly says the cipher, so with quick search you will find many online tools to decode, I used this. EncodedThat’s a kinda interesting one, it says Encoding is not cryptography! (2.0!!! Now with even more layers!). At the first glance I thought about that mores code challenge on hackthebox, and it was close (many layers). 504b0304140000000800308281576ed34a1e5c0000005c00000008000000666c61672e74787405c1c10e83200c00d0cf5a3c96c6a106b354d4aab7ed02acb8193501ffdef7286eff57ff546c979ec9653609a0c2194a8019c0812629062c8d7475b48dcd72ea4b7f31ad9c99d2d8caded23bf80faebe31e121e187be562a1c93bb01504b01021403140000000800308281576ed34a1e5c0000005c000000080000000000000000000000800100000000666c61672e747874504b0506000000000100010036000000820000000000 This looks like a zip format, so let’s extract the data inside: st = \"...\" binary_data = bytes.fromhex(st) with open(\"output.zip\", \"wb\") as f: f.write(binary_data) After extracting the data it show flag.txt which contains base64 string, trying to decode it gives some trash string (but it’s not!): BZh91AY\u0026SY�\u0001\u0004�@�@�`�0�\u0006i fux\u0011g+ͅ\u0010W85-F)6cedYh\u0015E\u000e\u001164Smf\u0008Ck=knU+\u003e.p!c as you can see bz, another compression. Let’s extract again (this time using bash): echo \"$base64_encoded_string\" | base64 --decode | bzcat \u003e output.txt output.txt contains binary (greatet’s convert it to ASCII: 666c61677b677572666c652a6865316c302f7730726c645f6e756c6c5f40666b3d7375646f7d Now we have HEX lol (it’s convert it to ASCII again): echo \"$hex_string\" | xxd -r -p Finally we get the flag: flag{gurfle*he1l0/***********} ENIGMAThis is really badass challenge!, i wasted too much time in it and I could solve but there are what you should do to be able to solve it properly: Inspecting the console, gives us some hints (that’s where you should always start from) Hints but at what cost! Let’s analysis those hints: QK JO LU XG DV looks like plugboard wiring map. UKW B is indeed the reflector being used. 3 of 5 Rotors it’s not clear what does that mean but I guess it’s the number of used rotors. First 5 digits of Pi that’s another ambiguous hint, but it could be the (ring settings/Position setting) as \"3 14 15\" Metasploit Acquired by Rapid7 hmm the date?!, Metasploit acquired by Rapid7 on 20 Oct, 2009 so (ring settings/Position setting) could be (\"20 10 09\", \"10 20 09\"). there is another possiblity but I just ignored it. How to solve online ? There are many possiblities and permutations to try, so it’s better to write a code for that from itertools import permutations from string import ascii_uppercase def enigma_decrypt(encrypted_message, rotor_order, reflector_type, plugboard_settings, initial_positions): rotor_wirings = { 'I': 'EKMFLGDQVZNTOWYHXUSPAIBRCJ', 'II': 'AJDKSIRUXBLHWTMCQGZNPYFVOE', 'III': 'BDFHJLCPRTXVZNYEIWGAKMUSQO', 'IV': 'ESOVPZJAYQUIRHXLNFTGKDCMWB', 'V': 'VZBRGITYUPSDNHLXAWMJQOFECK' } reflector_wirings = { 'UKW-B': 'YRUHQSLDPXNGOKMIEBFZCWVJAT' } plugboard = {char: char for char in ascii_uppercase} plugboard.update(plugboard_settings) rotor_positions = {rotor: initial_positions.split()[i] for i, rotor in enumerate(rotor_order.split())} decrypted_message = '' for char in encrypted_message: if char in plugboard: char = plugboard[char] for rotor, position in rotor_positions.items(): char = rotor_wirings[rotor][(ord(char) - ord('A') + ord(position) - ord('A')) % 26] char = reflector_wirings[reflector_type][ord(char) - ord('A')] for rotor, positio","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:3","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#encoded"},{"categories":["hacking","linux"],"content":" Crypto Skip CipherThis challenge is easy as it clearly says the cipher, so with quick search you will find many online tools to decode, I used this. EncodedThat’s a kinda interesting one, it says Encoding is not cryptography! (2.0!!! Now with even more layers!). At the first glance I thought about that mores code challenge on hackthebox, and it was close (many layers). 504b0304140000000800308281576ed34a1e5c0000005c00000008000000666c61672e74787405c1c10e83200c00d0cf5a3c96c6a106b354d4aab7ed02acb8193501ffdef7286eff57ff546c979ec9653609a0c2194a8019c0812629062c8d7475b48dcd72ea4b7f31ad9c99d2d8caded23bf80faebe31e121e187be562a1c93bb01504b01021403140000000800308281576ed34a1e5c0000005c000000080000000000000000000000800100000000666c61672e747874504b0506000000000100010036000000820000000000 This looks like a zip format, so let’s extract the data inside: st = \"...\" binary_data = bytes.fromhex(st) with open(\"output.zip\", \"wb\") as f: f.write(binary_data) After extracting the data it show flag.txt which contains base64 string, trying to decode it gives some trash string (but it’s not!): BZh91AY\u0026SY�\u0001\u0004�@�@�`�0�\u0006i fux\u0011g+ͅ\u0010W85-F)6cedYh\u0015E\u000e\u001164Smf\u0008Ck=knU+\u003e.p!c as you can see bz, another compression. Let’s extract again (this time using bash): echo \"$base64_encoded_string\" | base64 --decode | bzcat \u003e output.txt output.txt contains binary (greatet’s convert it to ASCII: 666c61677b677572666c652a6865316c302f7730726c645f6e756c6c5f40666b3d7375646f7d Now we have HEX lol (it’s convert it to ASCII again): echo \"$hex_string\" | xxd -r -p Finally we get the flag: flag{gurfle*he1l0/***********} ENIGMAThis is really badass challenge!, i wasted too much time in it and I could solve but there are what you should do to be able to solve it properly: Inspecting the console, gives us some hints (that’s where you should always start from) Hints but at what cost! Let’s analysis those hints: QK JO LU XG DV looks like plugboard wiring map. UKW B is indeed the reflector being used. 3 of 5 Rotors it’s not clear what does that mean but I guess it’s the number of used rotors. First 5 digits of Pi that’s another ambiguous hint, but it could be the (ring settings/Position setting) as \"3 14 15\" Metasploit Acquired by Rapid7 hmm the date?!, Metasploit acquired by Rapid7 on 20 Oct, 2009 so (ring settings/Position setting) could be (\"20 10 09\", \"10 20 09\"). there is another possiblity but I just ignored it. How to solve online ? There are many possiblities and permutations to try, so it’s better to write a code for that from itertools import permutations from string import ascii_uppercase def enigma_decrypt(encrypted_message, rotor_order, reflector_type, plugboard_settings, initial_positions): rotor_wirings = { 'I': 'EKMFLGDQVZNTOWYHXUSPAIBRCJ', 'II': 'AJDKSIRUXBLHWTMCQGZNPYFVOE', 'III': 'BDFHJLCPRTXVZNYEIWGAKMUSQO', 'IV': 'ESOVPZJAYQUIRHXLNFTGKDCMWB', 'V': 'VZBRGITYUPSDNHLXAWMJQOFECK' } reflector_wirings = { 'UKW-B': 'YRUHQSLDPXNGOKMIEBFZCWVJAT' } plugboard = {char: char for char in ascii_uppercase} plugboard.update(plugboard_settings) rotor_positions = {rotor: initial_positions.split()[i] for i, rotor in enumerate(rotor_order.split())} decrypted_message = '' for char in encrypted_message: if char in plugboard: char = plugboard[char] for rotor, position in rotor_positions.items(): char = rotor_wirings[rotor][(ord(char) - ord('A') + ord(position) - ord('A')) % 26] char = reflector_wirings[reflector_type][ord(char) - ord('A')] for rotor, positio","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:3","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#enigma"},{"categories":["hacking","linux"],"content":" Crypto Skip CipherThis challenge is easy as it clearly says the cipher, so with quick search you will find many online tools to decode, I used this. EncodedThat’s a kinda interesting one, it says Encoding is not cryptography! (2.0!!! Now with even more layers!). At the first glance I thought about that mores code challenge on hackthebox, and it was close (many layers). 504b0304140000000800308281576ed34a1e5c0000005c00000008000000666c61672e74787405c1c10e83200c00d0cf5a3c96c6a106b354d4aab7ed02acb8193501ffdef7286eff57ff546c979ec9653609a0c2194a8019c0812629062c8d7475b48dcd72ea4b7f31ad9c99d2d8caded23bf80faebe31e121e187be562a1c93bb01504b01021403140000000800308281576ed34a1e5c0000005c000000080000000000000000000000800100000000666c61672e747874504b0506000000000100010036000000820000000000 This looks like a zip format, so let’s extract the data inside: st = \"...\" binary_data = bytes.fromhex(st) with open(\"output.zip\", \"wb\") as f: f.write(binary_data) After extracting the data it show flag.txt which contains base64 string, trying to decode it gives some trash string (but it’s not!): BZh91AY\u0026SY�\u0001\u0004�@�@�`�0�\u0006i fux\u0011g+ͅ\u0010W85-F)6cedYh\u0015E\u000e\u001164Smf\u0008Ck=knU+\u003e.p!c as you can see bz, another compression. Let’s extract again (this time using bash): echo \"$base64_encoded_string\" | base64 --decode | bzcat \u003e output.txt output.txt contains binary (greatet’s convert it to ASCII: 666c61677b677572666c652a6865316c302f7730726c645f6e756c6c5f40666b3d7375646f7d Now we have HEX lol (it’s convert it to ASCII again): echo \"$hex_string\" | xxd -r -p Finally we get the flag: flag{gurfle*he1l0/***********} ENIGMAThis is really badass challenge!, i wasted too much time in it and I could solve but there are what you should do to be able to solve it properly: Inspecting the console, gives us some hints (that’s where you should always start from) Hints but at what cost! Let’s analysis those hints: QK JO LU XG DV looks like plugboard wiring map. UKW B is indeed the reflector being used. 3 of 5 Rotors it’s not clear what does that mean but I guess it’s the number of used rotors. First 5 digits of Pi that’s another ambiguous hint, but it could be the (ring settings/Position setting) as \"3 14 15\" Metasploit Acquired by Rapid7 hmm the date?!, Metasploit acquired by Rapid7 on 20 Oct, 2009 so (ring settings/Position setting) could be (\"20 10 09\", \"10 20 09\"). there is another possiblity but I just ignored it. How to solve online ? There are many possiblities and permutations to try, so it’s better to write a code for that from itertools import permutations from string import ascii_uppercase def enigma_decrypt(encrypted_message, rotor_order, reflector_type, plugboard_settings, initial_positions): rotor_wirings = { 'I': 'EKMFLGDQVZNTOWYHXUSPAIBRCJ', 'II': 'AJDKSIRUXBLHWTMCQGZNPYFVOE', 'III': 'BDFHJLCPRTXVZNYEIWGAKMUSQO', 'IV': 'ESOVPZJAYQUIRHXLNFTGKDCMWB', 'V': 'VZBRGITYUPSDNHLXAWMJQOFECK' } reflector_wirings = { 'UKW-B': 'YRUHQSLDPXNGOKMIEBFZCWVJAT' } plugboard = {char: char for char in ascii_uppercase} plugboard.update(plugboard_settings) rotor_positions = {rotor: initial_positions.split()[i] for i, rotor in enumerate(rotor_order.split())} decrypted_message = '' for char in encrypted_message: if char in plugboard: char = plugboard[char] for rotor, position in rotor_positions.items(): char = rotor_wirings[rotor][(ord(char) - ord('A') + ord(position) - ord('A')) % 26] char = reflector_wirings[reflector_type][ord(char) - ord('A')] for rotor, positio","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:3","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#ransom"},{"categories":["hacking","linux"],"content":" Crypto Skip CipherThis challenge is easy as it clearly says the cipher, so with quick search you will find many online tools to decode, I used this. EncodedThat’s a kinda interesting one, it says Encoding is not cryptography! (2.0!!! Now with even more layers!). At the first glance I thought about that mores code challenge on hackthebox, and it was close (many layers). 504b0304140000000800308281576ed34a1e5c0000005c00000008000000666c61672e74787405c1c10e83200c00d0cf5a3c96c6a106b354d4aab7ed02acb8193501ffdef7286eff57ff546c979ec9653609a0c2194a8019c0812629062c8d7475b48dcd72ea4b7f31ad9c99d2d8caded23bf80faebe31e121e187be562a1c93bb01504b01021403140000000800308281576ed34a1e5c0000005c000000080000000000000000000000800100000000666c61672e747874504b0506000000000100010036000000820000000000 This looks like a zip format, so let’s extract the data inside: st = \"...\" binary_data = bytes.fromhex(st) with open(\"output.zip\", \"wb\") as f: f.write(binary_data) After extracting the data it show flag.txt which contains base64 string, trying to decode it gives some trash string (but it’s not!): BZh91AY\u0026SY�\u0001\u0004�@�@�`�0�\u0006i fux\u0011g+ͅ\u0010W85-F)6cedYh\u0015E\u000e\u001164Smf\u0008Ck=knU+\u003e.p!c as you can see bz, another compression. Let’s extract again (this time using bash): echo \"$base64_encoded_string\" | base64 --decode | bzcat \u003e output.txt output.txt contains binary (greatet’s convert it to ASCII: 666c61677b677572666c652a6865316c302f7730726c645f6e756c6c5f40666b3d7375646f7d Now we have HEX lol (it’s convert it to ASCII again): echo \"$hex_string\" | xxd -r -p Finally we get the flag: flag{gurfle*he1l0/***********} ENIGMAThis is really badass challenge!, i wasted too much time in it and I could solve but there are what you should do to be able to solve it properly: Inspecting the console, gives us some hints (that’s where you should always start from) Hints but at what cost! Let’s analysis those hints: QK JO LU XG DV looks like plugboard wiring map. UKW B is indeed the reflector being used. 3 of 5 Rotors it’s not clear what does that mean but I guess it’s the number of used rotors. First 5 digits of Pi that’s another ambiguous hint, but it could be the (ring settings/Position setting) as \"3 14 15\" Metasploit Acquired by Rapid7 hmm the date?!, Metasploit acquired by Rapid7 on 20 Oct, 2009 so (ring settings/Position setting) could be (\"20 10 09\", \"10 20 09\"). there is another possiblity but I just ignored it. How to solve online ? There are many possiblities and permutations to try, so it’s better to write a code for that from itertools import permutations from string import ascii_uppercase def enigma_decrypt(encrypted_message, rotor_order, reflector_type, plugboard_settings, initial_positions): rotor_wirings = { 'I': 'EKMFLGDQVZNTOWYHXUSPAIBRCJ', 'II': 'AJDKSIRUXBLHWTMCQGZNPYFVOE', 'III': 'BDFHJLCPRTXVZNYEIWGAKMUSQO', 'IV': 'ESOVPZJAYQUIRHXLNFTGKDCMWB', 'V': 'VZBRGITYUPSDNHLXAWMJQOFECK' } reflector_wirings = { 'UKW-B': 'YRUHQSLDPXNGOKMIEBFZCWVJAT' } plugboard = {char: char for char in ascii_uppercase} plugboard.update(plugboard_settings) rotor_positions = {rotor: initial_positions.split()[i] for i, rotor in enumerate(rotor_order.split())} decrypted_message = '' for char in encrypted_message: if char in plugboard: char = plugboard[char] for rotor, position in rotor_positions.items(): char = rotor_wirings[rotor][(ord(char) - ord('A') + ord(position) - ord('A')) % 26] char = reflector_wirings[reflector_type][ord(char) - ord('A')] for rotor, positio","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:3","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#xor"},{"categories":["hacking","linux"],"content":" Programming BirthdayWhen I saw that it only gives you 5 points I thought it’s going to be easy and I was wrong!, it took me so much time as I didn’t know how to properly send the request lol, and what to do as the challenge leave you no where near the solution with really ambiguous hint : [Birthday]: Yes, you need the year too. Hint: I'm alive and far from retirement. Let’s get started: First Inspect the network : you will find that there exist a GET request when you first click on the challenge which fetches the data (date hashed in SHA-256 and don’t ask me how I know that!) SHA-256 date Try to crack the hash: The concept is easy as the hint suggests \"far from retirement\", I will try all possible dates lol to 1900 hehe. import hashlib def calculate_sha256_hash(data): sha256 = hashlib.sha256() sha256.update(data.encode('utf-8')) return sha256.hexdigest() def check_birthday_hash(target_hash): for year in range(1900, 2023): # Adjust the range based on reasonable birth years for month in range(1, 13): for day in range(1, 32): try: birthday = f\"{month:02d}/{day:02d}/{year}\" calculated_hash = calculate_sha256_hash(birthday) if calculated_hash == target_hash: return birthday except ValueError: continue return None if __name__ == \"__main__\": provided_hash = \"6c833595c7502119465895442b340b3118a8c1aec222882d35e364f75e57b268\" birthday = check_birthday_hash(provided_hash) print(f\"Found birthday: {birthday}\") Now what?!, I got the desired date (here I got stuck lol, I didn’t know how to send to the server lol). The answer is so easy but I was so dumb lol. And that’s when I know, I am so stupid lol And btw, I am the first one to solve it :D I am the first one to solve it :D Secure OTPThat was an easy one, once you got all the hints which btw can be found by submitting many times with wrong answers or seen in the response which first clicking the problem card, anyway let’s jump to the solution. The hints : seed is given, digits are random int from 0 to 9. So based on these 2 factors we can regenerate the OTP. import random seed = 1701957089 def generate_otp(seed): random.seed(seed) otp = \"\" for _ in range(6): digit = random.randint(0, 9) otp += str(digit) return otp otp = generate_otp(seed) print(f\"Generated OTP with seed {seed}: {otp}\") PS: make sure to submit before the timer. ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:4","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#programming"},{"categories":["hacking","linux"],"content":" Programming BirthdayWhen I saw that it only gives you 5 points I thought it’s going to be easy and I was wrong!, it took me so much time as I didn’t know how to properly send the request lol, and what to do as the challenge leave you no where near the solution with really ambiguous hint : [Birthday]: Yes, you need the year too. Hint: I'm alive and far from retirement. Let’s get started: First Inspect the network : you will find that there exist a GET request when you first click on the challenge which fetches the data (date hashed in SHA-256 and don’t ask me how I know that!) SHA-256 date Try to crack the hash: The concept is easy as the hint suggests \"far from retirement\", I will try all possible dates lol to 1900 hehe. import hashlib def calculate_sha256_hash(data): sha256 = hashlib.sha256() sha256.update(data.encode('utf-8')) return sha256.hexdigest() def check_birthday_hash(target_hash): for year in range(1900, 2023): # Adjust the range based on reasonable birth years for month in range(1, 13): for day in range(1, 32): try: birthday = f\"{month:02d}/{day:02d}/{year}\" calculated_hash = calculate_sha256_hash(birthday) if calculated_hash == target_hash: return birthday except ValueError: continue return None if __name__ == \"__main__\": provided_hash = \"6c833595c7502119465895442b340b3118a8c1aec222882d35e364f75e57b268\" birthday = check_birthday_hash(provided_hash) print(f\"Found birthday: {birthday}\") Now what?!, I got the desired date (here I got stuck lol, I didn’t know how to send to the server lol). The answer is so easy but I was so dumb lol. And that’s when I know, I am so stupid lol And btw, I am the first one to solve it :D I am the first one to solve it :D Secure OTPThat was an easy one, once you got all the hints which btw can be found by submitting many times with wrong answers or seen in the response which first clicking the problem card, anyway let’s jump to the solution. The hints : seed is given, digits are random int from 0 to 9. So based on these 2 factors we can regenerate the OTP. import random seed = 1701957089 def generate_otp(seed): random.seed(seed) otp = \"\" for _ in range(6): digit = random.randint(0, 9) otp += str(digit) return otp otp = generate_otp(seed) print(f\"Generated OTP with seed {seed}: {otp}\") PS: make sure to submit before the timer. ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:4","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#birthday"},{"categories":["hacking","linux"],"content":" Programming BirthdayWhen I saw that it only gives you 5 points I thought it’s going to be easy and I was wrong!, it took me so much time as I didn’t know how to properly send the request lol, and what to do as the challenge leave you no where near the solution with really ambiguous hint : [Birthday]: Yes, you need the year too. Hint: I'm alive and far from retirement. Let’s get started: First Inspect the network : you will find that there exist a GET request when you first click on the challenge which fetches the data (date hashed in SHA-256 and don’t ask me how I know that!) SHA-256 date Try to crack the hash: The concept is easy as the hint suggests \"far from retirement\", I will try all possible dates lol to 1900 hehe. import hashlib def calculate_sha256_hash(data): sha256 = hashlib.sha256() sha256.update(data.encode('utf-8')) return sha256.hexdigest() def check_birthday_hash(target_hash): for year in range(1900, 2023): # Adjust the range based on reasonable birth years for month in range(1, 13): for day in range(1, 32): try: birthday = f\"{month:02d}/{day:02d}/{year}\" calculated_hash = calculate_sha256_hash(birthday) if calculated_hash == target_hash: return birthday except ValueError: continue return None if __name__ == \"__main__\": provided_hash = \"6c833595c7502119465895442b340b3118a8c1aec222882d35e364f75e57b268\" birthday = check_birthday_hash(provided_hash) print(f\"Found birthday: {birthday}\") Now what?!, I got the desired date (here I got stuck lol, I didn’t know how to send to the server lol). The answer is so easy but I was so dumb lol. And that’s when I know, I am so stupid lol And btw, I am the first one to solve it :D I am the first one to solve it :D Secure OTPThat was an easy one, once you got all the hints which btw can be found by submitting many times with wrong answers or seen in the response which first clicking the problem card, anyway let’s jump to the solution. The hints : seed is given, digits are random int from 0 to 9. So based on these 2 factors we can regenerate the OTP. import random seed = 1701957089 def generate_otp(seed): random.seed(seed) otp = \"\" for _ in range(6): digit = random.randint(0, 9) otp += str(digit) return otp otp = generate_otp(seed) print(f\"Generated OTP with seed {seed}: {otp}\") PS: make sure to submit before the timer. ","date":"2023-12-01","objectID":"/posts/can_you_hack_it/:3:4","series":[],"tags":[],"title":"Getting into hacking [Hacking Challenges]: Can you hack it?","uri":"/posts/can_you_hack_it/#secure-otp"},{"categories":["electronics"],"content":"In the palce I live in, electricity goes off everyday for 2 hours and I really need the internet connectoin that time, because you know it’s 2023, Internet is a like water, no one can live without it. ","date":"2023-11-27","objectID":"/posts/no_elect_no_internet_no_problem/:0:0","series":[],"tags":["diy-projects"],"title":"Use you home modem when electricity is down !","uri":"/posts/no_elect_no_internet_no_problem/#"},{"categories":["electronics"],"content":" Getting StartedBefore getting started with the project, make sure you have the required tools and materials: Battaries (for my case I used a power bank). Voltage Boost converter (DC-DC) USB cable. The other part of the modem connection. Avometer to check voltages. Solder Flux and soldering iron tool. Power bank, USB cable, and the modem cable. Voltage Regulator (Step Up) ","date":"2023-11-27","objectID":"/posts/no_elect_no_internet_no_problem/:1:0","series":[],"tags":["diy-projects"],"title":"Use you home modem when electricity is down !","uri":"/posts/no_elect_no_internet_no_problem/#getting-started"},{"categories":["electronics"],"content":" Check for faulty partsBefore soldering, make sure the cables are working properly be checking the input/output voltage using the Avometer. ","date":"2023-11-27","objectID":"/posts/no_elect_no_internet_no_problem/:2:0","series":[],"tags":["diy-projects"],"title":"Use you home modem when electricity is down !","uri":"/posts/no_elect_no_internet_no_problem/#check-for-faulty-parts"},{"categories":["electronics"],"content":" Power Bank output through the USB cable.Usually the power bank outputs 5V, which will be later steped up to 12V (input voltage of the home modem). Power bank output through the USB cable. ","date":"2023-11-27","objectID":"/posts/no_elect_no_internet_no_problem/:2:1","series":[],"tags":["diy-projects"],"title":"Use you home modem when electricity is down !","uri":"/posts/no_elect_no_internet_no_problem/#power-bank-output-through-the-usb-cable"},{"categories":["electronics"],"content":" Final output for the regulator Check out your home modem’s output (you can find it in the back of your modem) Adjust you the booster to match the desired output by turing around the potentiometer. Power bank output through the USB cable. ","date":"2023-11-27","objectID":"/posts/no_elect_no_internet_no_problem/:2:2","series":[],"tags":["diy-projects"],"title":"Use you home modem when electricity is down !","uri":"/posts/no_elect_no_internet_no_problem/#final-output-for-the-regulator"},{"categories":["linux","archlinux","discord"],"content":"How to manually update discord on archlinux ?","date":"2023-11-24","objectID":"/posts/updating_discord_linux/","series":[],"tags":[],"title":"How to update discord on archlinux ?","uri":"/posts/updating_discord_linux/"},{"categories":["linux","archlinux","discord"],"content":"I hate discord updates!, they do lots of updates which prevents discord desktop from launching. Bad for me that I use Archlinux, as discord ships thier updates as .deb. When discord needs to be updated So how to manually update discord without waiting for the package maintainer to update it for you ? ","date":"2023-11-24","objectID":"/posts/updating_discord_linux/:0:0","series":[],"tags":[],"title":"How to update discord on archlinux ?","uri":"/posts/updating_discord_linux/#"},{"categories":["linux","archlinux","discord"],"content":" Cheating wayThis method allows you to trick the Discord into thinking it’s been updated. First, check for the path of the discord executable file $(which discord) Then edit the resources/build_info.json in that path. { \"releaseChannel\": \"stable\", \"version\": \"0.0.xx\" // change to the latest version } ","date":"2023-11-24","objectID":"/posts/updating_discord_linux/:1:0","series":[],"tags":[],"title":"How to update discord on archlinux ?","uri":"/posts/updating_discord_linux/#cheating-way"},{"categories":["linux","archlinux","discord"],"content":" The proper wayThis method involves using the Arch Build System Download the asp through yay : yay -S asp Export the PKGBUILD file from discord : asp export discord Edit the pkgver=0.0.xx in the PKGBUILD with the current version. Build discord : makepkg -si ","date":"2023-11-24","objectID":"/posts/updating_discord_linux/:2:0","series":[],"tags":[],"title":"How to update discord on archlinux ?","uri":"/posts/updating_discord_linux/#the-proper-way"},{"categories":["Linux","Vim","hacking"],"content":"Cool thing starts by using linux, you're not cool if you use windoz","date":"2023-11-08","objectID":"/posts/cool_things/","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/"},{"categories":["Linux","Vim","hacking"],"content":"Life is a long journey of learning and experience, once you stop learning you die!, also sharing is caring. That’s why I am sharing this thing :D ","date":"2023-11-08","objectID":"/posts/cool_things/:0:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#"},{"categories":["Linux","Vim","hacking"],"content":" Cool ThingsCool Things is a long journey of adventure, fun and experience about silly technical things I didn’t know it existed and made my life easier (or not, but cool for sure). For now, I don’t know how to categorize them but I will try my best not to make things messy as possible. Why it's like that ? This list isn’t sorted I am using all these tools in Linux (Arch BTW) but it should work on other OSs. You should use linux, if you don’t, for making the best of your hardware and have the power to do anything you want. Here you will find tips, tricks, shortcuts, apps and utils making my OS experience fun and effective. ","date":"2023-11-08","objectID":"/posts/cool_things/:0:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#cool-things"},{"categories":["Linux","Vim","hacking"],"content":" Linux Experience Credits : github/thomas10-10 I am using linux as my main machine for work and fun, while I also have windows installed but I use it rarly for gaming. For that, I tried many linux flavours (DE - Desktop Environment) but most of them didn’t meet my own requirements so I learnt about WMs - Windwo Managers So what’s the WM I use ? : bspwm If you want to read more about how to choose your next WM, I recommend you to read this Unixporn wiki My Bspwm Setup You can find my setup on my github. ","date":"2023-11-08","objectID":"/posts/cool_things/:1:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#linux-experience"},{"categories":["Linux","Vim","hacking"],"content":" CLI","date":"2023-11-08","objectID":"/posts/cool_things/:2:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#cli"},{"categories":["Linux","Vim","hacking"],"content":" Apps File manager (python): ranger Another File manger (C): Vifm Task Management and Todos: dooit Code Snippets in terminal: nap Telegram CLI (huh): tg Terminal multiplexer. It lets you switch easily between several programs in one terminal: tmux ","date":"2023-11-08","objectID":"/posts/cool_things/:2:1","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#apps"},{"categories":["Linux","Vim","hacking"],"content":" Utils Video Downloader: yt-dlp Soundcloud Downloader: soundcloud-dl Disk Usage Analyzer (C): ncdu Another Disk Analyzer (Go): gud Process Viewer: htop Another Process Viewer and Resoure monitor : btop Anime Cli: ani-cli Send requests from terminal : HTTPie ADB (Android Debug Bridge): adb A key remapping daemon: keyd ","date":"2023-11-08","objectID":"/posts/cool_things/:2:2","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#utils"},{"categories":["Linux","Vim","hacking"],"content":" Apps (General Apps) Video Player: mpv Terminals:- Kitty Termite Alacritty Best Screenshots tool: Flameshot Create a GIF screen recorder: Peek Create and manage disk partitions: gparted A screencast tool to display your keys inspired by Screenflick: screenkey Document Viewer: zathura ","date":"2023-11-08","objectID":"/posts/cool_things/:3:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#apps-general-apps"},{"categories":["Linux","Vim","hacking"],"content":" Creativity Draw things: drawio Another nice drawing app: Inkscape Design UI/UX: Figam-Desktop Stylus Writing (pen): Write ","date":"2023-11-08","objectID":"/posts/cool_things/:3:1","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#creativity"},{"categories":["Linux","Vim","hacking"],"content":" Developement API platform for testing and building APIs: postman Database Viewers MongoDB Viewer: Compass Database Browser (sqlit): DB Browser for SQLite TablePlus HTTP intercepting tools httptoolkit Reverse Proxy: charles Web Debugging Proxy: fiddler Virtualization VirtualBox QEMU KVM For android: Genymotion Android Emulator: Android Emulator without Android Studio ","date":"2023-11-08","objectID":"/posts/cool_things/:3:2","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#developement"},{"categories":["Linux","Vim","hacking"],"content":" Social Media Discord but better (with themes): BetterDiscord ","date":"2023-11-08","objectID":"/posts/cool_things/:3:3","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#social-media"},{"categories":["Linux","Vim","hacking"],"content":" Browsers and Extensions Browsers Firefox ofc Brave keyboard-focused browser with a minimal GUI Terminal based: Lynx Extensions Keyboard-based navigation and control: Vimium Ad block: uBlock Origin Password Manager: KeePassXC-Browser Auto Sync your Leetcode: LeetHub Remove Tracking Elements from URLs: ClearURLs Block Trackers: Privacy Badger ","date":"2023-11-08","objectID":"/posts/cool_things/:4:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#browsers-and-extensions"},{"categories":["Linux","Vim","hacking"],"content":" Hacking Hacker Alert!!! I am not responsible for what you do with these tools, use them at your own risk! Aircrack-ng Sherlock apktool Jadx nmap gobuster sqlmap hashcat crunch arpspoof frida ","date":"2023-11-08","objectID":"/posts/cool_things/:5:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#hacking"},{"categories":["Linux","Vim","hacking"],"content":" ResourcesAll the interesting resources (about tech obviously) I find in the internet. ","date":"2023-11-08","objectID":"/posts/cool_things/:6:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#resources"},{"categories":["Linux","Vim","hacking"],"content":" Github","date":"2023-11-08","objectID":"/posts/cool_things/:6:1","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#github"},{"categories":["Linux","Vim","hacking"],"content":" YoutubeChannels NullByteWHT NetNinja EngineerMan Danidev sentdex NetworkChuck PwnFunction FlorinPop TsodingDaily chrisatmachine hnasr NeetCode CodingGarden Junferno TarekAlabd MetwallyLabs rwxrob ThePrimeagen WebDevSimplified TheCodingTrain MentalOutlaw jdhvideo LukeSmithxyz TechWithTim bawad JohnHammond010 freecodecamp AcmascisOrg BenEater TheLazyEngineer Videos (probably most of these videos are from the above channels lol) I regret doing this… ","date":"2023-11-08","objectID":"/posts/cool_things/:6:2","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#youtube"},{"categories":["Linux","Vim","hacking"],"content":" Others","date":"2023-11-08","objectID":"/posts/cool_things/:6:3","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#others"},{"categories":["Linux","Vim","hacking"],"content":" Be A WizardShowing the practical things I have learnt in a specific technology, again IDK how to categorize. So I will just put things based on the technology. ","date":"2023-11-08","objectID":"/posts/cool_things/:7:0","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#be-a-wizard"},{"categories":["Linux","Vim","hacking"],"content":" Vim Vim navigations inside command mode #1: q: Opens up a vim buffer at the bottom of the current screen, allowing you to enter commands and navigate just like vi. Vim navigations inside command mode #2: Opening the command mode, and pressing C-f opens a buffer at the bottom of the screen just like #1. Capitalize/Lowercase characters: gU, gu You can combine them with other shortcuts, example you want to make the text inside \u003c\u003e uppercase!: \u003chello, world\u003e -\u003e gUi\u003c -\u003e \u003cHELLO, WORLD\u003e ","date":"2023-11-08","objectID":"/posts/cool_things/:7:1","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#vim"},{"categories":["Linux","Vim","hacking"],"content":" Ranger Extracting archives inside ranger: 1l ","date":"2023-11-08","objectID":"/posts/cool_things/:7:2","series":[],"tags":["linux","learning","hacks"],"title":"Linux And Other Cool Things","uri":"/posts/cool_things/#ranger"},{"categories":["API","hacking","reverse engineering"],"content":"So you heared it. Askfm Reverse Engineering! to get back the threads to the web version by creating a web extension that calls the mobile api to show the data and more. ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:0:0","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#"},{"categories":["API","hacking","reverse engineering"],"content":" What the heck is askfm ?Ah Askfm, the good old days when you get back from school and open your askfm account to check these question: which back at the time looked like ‘What is your favourite colour ?, What order do you wear your shoes ? etc…’. Askfm was something cute when almost few people (those who had opinios about everything) used it, now it became a monster, turned into an ad targeting application with many features that ruined the application : like coins (the first stupid thing), then many more stupid featues and many people used the application the wrong way (you know what I mean if you’re using it now). ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:0:0","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#what-the-heck-is-askfm-"},{"categories":["API","hacking","reverse engineering"],"content":" MotivationProbably one important feature which got nuked by askfm is : threads. Back in time, threads was the best feature, you basically send a question to something with replies inside it, the reply isn’t shown unless the owner publish it with answer. Replying with an image was a thing! Now askfm nuked it, and made it only available for the mobile users (really!) with huge differences (it’s called chat now): Anyone can reply to the question with anything without the permission of account owner!!! Can’t reply with images as account owner. Anyway, I am not here to convince you to leave askfm, I have a history of creating askfm bots and auto_repliers, when I logged into my very old account (which is deleted now btw) I tried to view a thread and I wasn’t be able to do so (had to install the application on my phone). So I thought it would be a great idea to have some sort of a web extension to just show the questions/replies under a question. In this blog, I am sharing my journey to do so! ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:1:0","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#motivation"},{"categories":["API","hacking","reverse engineering"],"content":" SetupAfter a quick research and inspection to the web version of the askfm, I found out that askfm mobile is different from the web version (ofc). so at first glance, I thought about inspecting the traffic in the mobile application. So I tried many mobile application to inspect the traffic but nothing worked !!. That’s why I switched to using proxy applications like charles but it didn’t work! (i don’t remember why!). Lastly found this awesome, game changer, program: HTTPToolKit but this need to run inside a VM, so I installed Genymotion(coz you know, I am lazy) Installing askfm on a VM I wasn’t be able to install the application on the VM on the first try to I had to do some tricks: I modified the buildprobs at : /system/build.prop and removed all the VM traces by Genymotion. ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:2:0","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#setup"},{"categories":["API","hacking","reverse engineering"],"content":" Inspecting the TrafficAs you can see below, The API askfm uses is mobile specific. and it uses HMAC for the authorization. HTTPToolKit in VM HMAC (Hash-based Message Authentication Code) is a specific type of message authentication code that involves hashing a message with a secret key to produce a fixed-size output, which can be used to verify the integrity and authenticity of the message. HMAC is commonly used for authentication and integrity checking in various security protocols and applications, such as in web services, API authentication, and data transmission. How HMAC authorization works is simple: How HMAC Works ? So basically, there are 2 steps that the application does to send a HTTP Request: Key Generation : The key should be in the app and the server agrees on using that key. HMAC Calculation: The app calculates the HMAC by applying a specific cryptographic hash function (SHA-1) to the message and the secret key. The result of this calculation is a fixed-size hash value which is then send in the headers as : Authorization: HMAC \u003chash\u003e So all we have to do now it just find the KEY and how the app generates the HMAC hash! (easy?). ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:2:1","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#inspecting-the-traffic"},{"categories":["API","hacking","reverse engineering"],"content":" Decompiling the apkSo you’re still here ?, good because we’re just about to start the interesting part. What’s an APK you ask ? APK is a compressed archive file that contains all of the data and resources needed by an application to run on Android device. This mean we can extract it. For this propose I used Jadx which is a command line and GUI tool for producing Java source code from Android Dex and Apk file, jadx can’t decompile all 100% of the code, so errors will occur. Generating the hash As you can see, I have found the part which generates the HMAC hash. Digging the code more we’ll find many interesting things: The needed headers (which are obvious from the network inspection). Accept, Accept-Encoding X-Client-Type: maybe used for client identification. X-Api-Version: the API version to use. X-Access-Token: the access token, which is fetched, somehow, separately. public final class RequestHeaders { public static final RequestHeaders INSTANCE = new RequestHeaders(); private RequestHeaders() { } public final Map\u003cString, String\u003e headersWithSignature(String str, String accessToken) { Intrinsics.checkNotNullParameter(accessToken, \"accessToken\"); TreeMap treeMap = new TreeMap(); treeMap.put(\"Accept\", \"application/json; charset=utf-8\"); treeMap.put(\"Accept-Encoding\", \"identity\"); String clientType = Initializer.instance().getClientType(); Intrinsics.checkNotNullExpressionValue(clientType, \"instance().clientType\"); treeMap.put(\"X-Client-Type\", clientType); String apiVersion = Initializer.instance().getApiVersion(); Intrinsics.checkNotNullExpressionValue(apiVersion, \"instance().apiVersion\"); treeMap.put(\"X-Api-Version\", apiVersion); String hostWithPort = Initializer.instance().getHostWithPort(); Intrinsics.checkNotNullExpressionValue(hostWithPort, \"instance().hostWithPort\"); treeMap.put(\"Host\", hostWithPort); treeMap.put(\"X-Forwarded-Proto\", \"https\"); if (!TextUtils.isEmpty(accessToken)) { treeMap.put(\"X-Access-Token\", accessToken); } if (!TextUtils.isEmpty(str)) { StringCompanionObject stringCompanionObject = StringCompanionObject.INSTANCE; String format = String.format(\"HMAC %s\", Arrays.copyOf(new Object[]{str}, 1)); Intrinsics.checkNotNullExpressionValue(format, \"format(format, *args)\"); treeMap.put(\"Authorization\", format); } return treeMap; } } Server Params. public interface ServerParameters { public static final String ADVERTISING_ID_ENABLED_PARAM = \"advertiserIdEnabled\"; public static final String ADVERTISING_ID_PARAM = \"advertiserId\"; public static final String ADVERTISING_ID_WITH_GPS = \"isGaidWithGps\"; public static final String AD_REVENUE_COUNTER = \"adrevenue_counter\"; public static final String AD_REVENUE_PAYLOAD = \"ad_network\"; public static final String AF_DEV_KEY = \"appsflyerKey\"; public static final String AF_FIREBASE_TOKEN = \"af_gcm_token\"; public static final String AF_USER_ID = \"uid\"; public static final String AMAZON_AID = \"amazon_aid\"; public static final String AMAZON_AID_LIMIT = \"amazon_aid_limit\"; public static final String ANDROID_ID = \"android_id\"; public static final String ANDROID_SDK_INT = \"sdk\"; public static final String APP_ID = \"app_id\"; public static final String APP_NAME = \"app_name\"; public static final String APP_USER_ID = \"appUserId\"; public static final String APP_VERSION_CODE = \"app_version_code\"; public static final String APP_VERSION_NAME = \"app_version_name\"; public static final String BATTERY_CHARGING_KEY = \"btch\"; public static final String BATTERY_LEVEL_KEY = \"btl\"; public static final String BRAND = \"brand\"; public static final String CARRIER = \"carrier\"; public static final String CHANNEL_SERVER_PARAM = \"channel\"; public static final String CHECK_SUM1 = \"cksm_v1\"; public static final String COUNTRY = \"country\"; public static final String CURRENT_STORE = \"af_currentstore\"; public static final String DDL_METRICS = \"ddl\"; public static final String DEEP_LINK = \"af_deeplink\"; public static final String DEEP_LINK_RESOLVED = \"af_deeplink_r\"; public static final String DEFAULT_HOST = \"app","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:2:2","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#decompiling-the-apk"},{"categories":["API","hacking","reverse engineering"],"content":" Hmm, now what?So far so good, let’s recap what we have achieved so far. We found the KEY used in the HMAC generation, but a native lib called ffmpcodec is used to (maybe) perform some string modifications on the KEY. The HMAC generateHash method uses custom sha-1. The required headers are X-Access-Token, X-Api-Version, X-Client-Type. Probably, the hardest thing to achieve here is that the KEY has some sort of native lib to apply some modifications and returns a new string, if you know the new string KEY_NEW, we could you it directly after rewriting the other parts like generateHash. ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:2:3","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#hmm-now-what"},{"categories":["API","hacking","reverse engineering"],"content":" Decompile, Modifiy, RecompileWe can use the apktool to decode/decompile the apk, then make some modifications, recompile and test. apktool d askfm.apk Smali!!! After decompiling, the source is converted to samli, samli is a human readable format of the dex code. Take this example: Java code looks like this: String x = \"HI\" The dex code, which will most likely contain the hexadecimal sequence: 14 00 4A 00 The samli version: const-string v0, \"HI\" Now let’s modify the file where the apiPrivateKey is called, recompile and install the app. Here I am using APKLab which is a nice VS code extension for android reverse engineering. Modifiy in Samli LoggingSince I am connecting through adb, it would be obvious to use logcat. Let’s now get all the logs from askfm : adb logcat | grep askfm Logs try#1 great, no logs :'( Here are what I found about after some investigations using mobile-security-framework-mobsf: The app uses some anti-debugging mechanism. I need to dynamically analyse the app in runtime. ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:2:4","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#decompile-modifiy-recompile"},{"categories":["API","hacking","reverse engineering"],"content":" Decompile, Modifiy, RecompileWe can use the apktool to decode/decompile the apk, then make some modifications, recompile and test. apktool d askfm.apk Smali!!! After decompiling, the source is converted to samli, samli is a human readable format of the dex code. Take this example: Java code looks like this: String x = \"HI\" The dex code, which will most likely contain the hexadecimal sequence: 14 00 4A 00 The samli version: const-string v0, \"HI\" Now let’s modify the file where the apiPrivateKey is called, recompile and install the app. Here I am using APKLab which is a nice VS code extension for android reverse engineering. Modifiy in Samli LoggingSince I am connecting through adb, it would be obvious to use logcat. Let’s now get all the logs from askfm : adb logcat | grep askfm Logs try#1 great, no logs :'( Here are what I found about after some investigations using mobile-security-framework-mobsf: The app uses some anti-debugging mechanism. I need to dynamically analyse the app in runtime. ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:2:4","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#logging"},{"categories":["API","hacking","reverse engineering"],"content":" Dynamic AnalysisThat’s where frida shines, firda is a reverse engineering tool used for dynamic analysis and manipulation of software. It allows developers and security researchers to analyze and modify running applications, helping them understand how the software works and identify potential vulnerabilities. Frida is widely used in the cybersecurity and software development industries. Resources Here is a great tuturiol, explains basics of reverse engineering + frida: I install frida and hooked up the frida server to the VM. And here’s the script I wrote: // frida -U -l log.js -f com.askfm Java.perform(() =\u003e { const cl = Java.use(\"com.askfm.network.utils.Signature\") console.log(\"Started logging ...\") cl.generateHashWithKey .overload('java.lang.String', 'java.lang.String', 'java.lang.String', 'java.lang.String', 'java.util.Map') .implementation = function(key, method, host, path, obj) { console.log(key, method, host, path, obj) return this.generateHashWithKey(key, method, host, path, obj) } cl.serializeParams.overload('java.util.Map') .implementation = function (m) { const s = this.serializeParams(m) console.log(\"Serialized Params: \", s) return s } cl.sha1.overload('java.lang.String', 'java.lang.String') .implementation = function (s, keyString) { console.log(s, keyString) const sha = this.sha1(s, keyString) console.log(\"Hash\", sha) return sha } }); And finally the key!With many tries, finally I have logged the key! Getting the key! ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:2:5","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#dynamic-analysis"},{"categories":["API","hacking","reverse engineering"],"content":" Dynamic AnalysisThat’s where frida shines, firda is a reverse engineering tool used for dynamic analysis and manipulation of software. It allows developers and security researchers to analyze and modify running applications, helping them understand how the software works and identify potential vulnerabilities. Frida is widely used in the cybersecurity and software development industries. Resources Here is a great tuturiol, explains basics of reverse engineering + frida: I install frida and hooked up the frida server to the VM. And here’s the script I wrote: // frida -U -l log.js -f com.askfm Java.perform(() =\u003e { const cl = Java.use(\"com.askfm.network.utils.Signature\") console.log(\"Started logging ...\") cl.generateHashWithKey .overload('java.lang.String', 'java.lang.String', 'java.lang.String', 'java.lang.String', 'java.util.Map') .implementation = function(key, method, host, path, obj) { console.log(key, method, host, path, obj) return this.generateHashWithKey(key, method, host, path, obj) } cl.serializeParams.overload('java.util.Map') .implementation = function (m) { const s = this.serializeParams(m) console.log(\"Serialized Params: \", s) return s } cl.sha1.overload('java.lang.String', 'java.lang.String') .implementation = function (s, keyString) { console.log(s, keyString) const sha = this.sha1(s, keyString) console.log(\"Hash\", sha) return sha } }); And finally the key!With many tries, finally I have logged the key! Getting the key! ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:2:5","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#and-finally-the-key"},{"categories":["API","hacking","reverse engineering"],"content":" What’s next?After I successfully got the API, I created a web extension to call the mobile APIs, get the data and modify the HTML. Resources Link to the full project: get-threads-back A working version of the extension ","date":"2023-11-02","objectID":"/posts/askfm_reverse_engineering/:3:0","series":[],"tags":[],"title":"Askfm Reverse Engineering: Getting Threads Back!","uri":"/posts/askfm_reverse_engineering/#whats-next"},{"categories":["git","learning"],"content":"A practical guide for git with real life scenarios which can make your git experience better. ","date":"2023-10-16","objectID":"/posts/git_hacks/:0:0","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#"},{"categories":["git","learning"],"content":" Git for hackers Once a wise man said: “There are two types of hackers in this world: those who know git, and those who still don’t git it” When I refer to hackers, I mean those who love to go behind the things to discover how things work and break them (somehow). Originally, hacker simply meant advanced computer technology enthusiast (both hardware and software) and adherent of programming subculture who used their skill to achieve a goal or overcome an obstacle. If you don’t use git, you should start learning it now! ","date":"2023-10-16","objectID":"/posts/git_hacks/:0:0","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#git-for-hackers"},{"categories":["git","learning"],"content":" DisclaimerThis isn’t a tutorial on how to use git or it’s going to make to the best git user but will inspire you to make your git experience better. If you don’t know what’s git or version control, you should read this book : Pro Git from git’s offical website. I also assume you have git installed on your machine, and you have some basic experience with Linux Shell. Note I will update this blog whenever I find something useful to share. ","date":"2023-10-16","objectID":"/posts/git_hacks/:1:0","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#disclaimer"},{"categories":["git","learning"],"content":" IntroductionIn this tutorial, I am going to share some tips and tricks that I have tested that would make it easy to git. Uncommon git commands. Git \u0026 Bash aliases. Github Command line tools : gh. Markdown everywhere. ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:0","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#introduction"},{"categories":["git","learning"],"content":" Uncommon git commandsAnyone who ever used git, will know this flow (and yes, with deep understanding of how git works, you won’t use other commands). sequenceDiagram participant Working Tree participant Staging Area participant Local Repo Working Tree -\u003e\u003eStaging Area: git add Staging Area -\u003e\u003eLocal Repo: git commit Local Repo -\u003e\u003eStaging Area: git reset Staging Area -\u003e\u003eWorking Tree: git restore --staged Local Repo -\u003e\u003eWorking Tree: git checkout participant Remote Local Repo -\u003e\u003eRemote: git push Remote -\u003e\u003eLocal Repo: git pull Even though there are some hidden gems that will make your life easier: 1. git stashStash the changes in a dirty working directory away when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push Tip You can interactively choose which changes to stash when using git stash -p 2. git cherry-pickApply the changes introduced by some existing commits to your repo. git cherry-pick is a very useful command to use in case you want to have some commits to be picked by reference and added to the current working HEAD. git cherry-pick can be useful for: Applying hotfixs: When you want to apply a hotfix in one branch to other branches. Selectively merging changes: When you want to merge only specific commits from one branch into another, rather than merging the entire branch. Reordering commits: You can use git cherry-pick to reorder commits in the target branch or even apply commits from different parts of the source branch to achieve a specific commit order. Don't use it if:- When commits depend on each other: If the commits you want to cherry-pick have dependencies on other commits in the source branch, cherry-picking them individually can lead to errors or missing context Maintaining a clean commit history: Cherry-picking can lead to a less clean and linear commit history, as it introduces commits from another branch with different commit messages and timestamps. 2. git blameView the revision history of a file, showing who last modified each line and when. It’s a useful tool for tracking changes and identifying the author and commit associated with each line of code in a file. When git blame can be useful: Bug Tracking: When trying to identify the source of a bug, you can trace back commits. Security Auditing: For security-conscious projects, git blame can be employed to trace when and by whom security-related changes were made, aiding in security audits and investigations. HacksWhen you are interested in finding the origin for lines 40-60 for file foobar: git blame -L 40,+21 foo A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its parents, using commit^! notation: git blame -C -C -f $commit^! -- foo git annotate The only difference between this command and git blame is that they use slightly different output formats. 3. git bisectUse binary search to find the commit that introduced a bug in your code. This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:1","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#uncommon-git-commands"},{"categories":["git","learning"],"content":" Uncommon git commandsAnyone who ever used git, will know this flow (and yes, with deep understanding of how git works, you won’t use other commands). sequenceDiagram participant Working Tree participant Staging Area participant Local Repo Working Tree -\u003e\u003eStaging Area: git add Staging Area -\u003e\u003eLocal Repo: git commit Local Repo -\u003e\u003eStaging Area: git reset Staging Area -\u003e\u003eWorking Tree: git restore --staged Local Repo -\u003e\u003eWorking Tree: git checkout participant Remote Local Repo -\u003e\u003eRemote: git push Remote -\u003e\u003eLocal Repo: git pull Even though there are some hidden gems that will make your life easier: 1. git stashStash the changes in a dirty working directory away when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push Tip You can interactively choose which changes to stash when using git stash -p 2. git cherry-pickApply the changes introduced by some existing commits to your repo. git cherry-pick is a very useful command to use in case you want to have some commits to be picked by reference and added to the current working HEAD. git cherry-pick can be useful for: Applying hotfixs: When you want to apply a hotfix in one branch to other branches. Selectively merging changes: When you want to merge only specific commits from one branch into another, rather than merging the entire branch. Reordering commits: You can use git cherry-pick to reorder commits in the target branch or even apply commits from different parts of the source branch to achieve a specific commit order. Don't use it if:- When commits depend on each other: If the commits you want to cherry-pick have dependencies on other commits in the source branch, cherry-picking them individually can lead to errors or missing context Maintaining a clean commit history: Cherry-picking can lead to a less clean and linear commit history, as it introduces commits from another branch with different commit messages and timestamps. 2. git blameView the revision history of a file, showing who last modified each line and when. It’s a useful tool for tracking changes and identifying the author and commit associated with each line of code in a file. When git blame can be useful: Bug Tracking: When trying to identify the source of a bug, you can trace back commits. Security Auditing: For security-conscious projects, git blame can be employed to trace when and by whom security-related changes were made, aiding in security audits and investigations. HacksWhen you are interested in finding the origin for lines 40-60 for file foobar: git blame -L 40,+21 foo A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its parents, using commit^! notation: git blame -C -C -f $commit^! -- foo git annotate The only difference between this command and git blame is that they use slightly different output formats. 3. git bisectUse binary search to find the commit that introduced a bug in your code. This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:1","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#b1-git-stashb"},{"categories":["git","learning"],"content":" Uncommon git commandsAnyone who ever used git, will know this flow (and yes, with deep understanding of how git works, you won’t use other commands). sequenceDiagram participant Working Tree participant Staging Area participant Local Repo Working Tree -\u003e\u003eStaging Area: git add Staging Area -\u003e\u003eLocal Repo: git commit Local Repo -\u003e\u003eStaging Area: git reset Staging Area -\u003e\u003eWorking Tree: git restore --staged Local Repo -\u003e\u003eWorking Tree: git checkout participant Remote Local Repo -\u003e\u003eRemote: git push Remote -\u003e\u003eLocal Repo: git pull Even though there are some hidden gems that will make your life easier: 1. git stashStash the changes in a dirty working directory away when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push Tip You can interactively choose which changes to stash when using git stash -p 2. git cherry-pickApply the changes introduced by some existing commits to your repo. git cherry-pick is a very useful command to use in case you want to have some commits to be picked by reference and added to the current working HEAD. git cherry-pick can be useful for: Applying hotfixs: When you want to apply a hotfix in one branch to other branches. Selectively merging changes: When you want to merge only specific commits from one branch into another, rather than merging the entire branch. Reordering commits: You can use git cherry-pick to reorder commits in the target branch or even apply commits from different parts of the source branch to achieve a specific commit order. Don't use it if:- When commits depend on each other: If the commits you want to cherry-pick have dependencies on other commits in the source branch, cherry-picking them individually can lead to errors or missing context Maintaining a clean commit history: Cherry-picking can lead to a less clean and linear commit history, as it introduces commits from another branch with different commit messages and timestamps. 2. git blameView the revision history of a file, showing who last modified each line and when. It’s a useful tool for tracking changes and identifying the author and commit associated with each line of code in a file. When git blame can be useful: Bug Tracking: When trying to identify the source of a bug, you can trace back commits. Security Auditing: For security-conscious projects, git blame can be employed to trace when and by whom security-related changes were made, aiding in security audits and investigations. HacksWhen you are interested in finding the origin for lines 40-60 for file foobar: git blame -L 40,+21 foo A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its parents, using commit^! notation: git blame -C -C -f $commit^! -- foo git annotate The only difference between this command and git blame is that they use slightly different output formats. 3. git bisectUse binary search to find the commit that introduced a bug in your code. This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:1","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#b2-git-cherry-pickb"},{"categories":["git","learning"],"content":" Uncommon git commandsAnyone who ever used git, will know this flow (and yes, with deep understanding of how git works, you won’t use other commands). sequenceDiagram participant Working Tree participant Staging Area participant Local Repo Working Tree -\u003e\u003eStaging Area: git add Staging Area -\u003e\u003eLocal Repo: git commit Local Repo -\u003e\u003eStaging Area: git reset Staging Area -\u003e\u003eWorking Tree: git restore --staged Local Repo -\u003e\u003eWorking Tree: git checkout participant Remote Local Repo -\u003e\u003eRemote: git push Remote -\u003e\u003eLocal Repo: git pull Even though there are some hidden gems that will make your life easier: 1. git stashStash the changes in a dirty working directory away when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push Tip You can interactively choose which changes to stash when using git stash -p 2. git cherry-pickApply the changes introduced by some existing commits to your repo. git cherry-pick is a very useful command to use in case you want to have some commits to be picked by reference and added to the current working HEAD. git cherry-pick can be useful for: Applying hotfixs: When you want to apply a hotfix in one branch to other branches. Selectively merging changes: When you want to merge only specific commits from one branch into another, rather than merging the entire branch. Reordering commits: You can use git cherry-pick to reorder commits in the target branch or even apply commits from different parts of the source branch to achieve a specific commit order. Don't use it if:- When commits depend on each other: If the commits you want to cherry-pick have dependencies on other commits in the source branch, cherry-picking them individually can lead to errors or missing context Maintaining a clean commit history: Cherry-picking can lead to a less clean and linear commit history, as it introduces commits from another branch with different commit messages and timestamps. 2. git blameView the revision history of a file, showing who last modified each line and when. It’s a useful tool for tracking changes and identifying the author and commit associated with each line of code in a file. When git blame can be useful: Bug Tracking: When trying to identify the source of a bug, you can trace back commits. Security Auditing: For security-conscious projects, git blame can be employed to trace when and by whom security-related changes were made, aiding in security audits and investigations. HacksWhen you are interested in finding the origin for lines 40-60 for file foobar: git blame -L 40,+21 foo A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its parents, using commit^! notation: git blame -C -C -f $commit^! -- foo git annotate The only difference between this command and git blame is that they use slightly different output formats. 3. git bisectUse binary search to find the commit that introduced a bug in your code. This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:1","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#b2-git-blameb"},{"categories":["git","learning"],"content":" Uncommon git commandsAnyone who ever used git, will know this flow (and yes, with deep understanding of how git works, you won’t use other commands). sequenceDiagram participant Working Tree participant Staging Area participant Local Repo Working Tree -\u003e\u003eStaging Area: git add Staging Area -\u003e\u003eLocal Repo: git commit Local Repo -\u003e\u003eStaging Area: git reset Staging Area -\u003e\u003eWorking Tree: git restore --staged Local Repo -\u003e\u003eWorking Tree: git checkout participant Remote Local Repo -\u003e\u003eRemote: git push Remote -\u003e\u003eLocal Repo: git pull Even though there are some hidden gems that will make your life easier: 1. git stashStash the changes in a dirty working directory away when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push Tip You can interactively choose which changes to stash when using git stash -p 2. git cherry-pickApply the changes introduced by some existing commits to your repo. git cherry-pick is a very useful command to use in case you want to have some commits to be picked by reference and added to the current working HEAD. git cherry-pick can be useful for: Applying hotfixs: When you want to apply a hotfix in one branch to other branches. Selectively merging changes: When you want to merge only specific commits from one branch into another, rather than merging the entire branch. Reordering commits: You can use git cherry-pick to reorder commits in the target branch or even apply commits from different parts of the source branch to achieve a specific commit order. Don't use it if:- When commits depend on each other: If the commits you want to cherry-pick have dependencies on other commits in the source branch, cherry-picking them individually can lead to errors or missing context Maintaining a clean commit history: Cherry-picking can lead to a less clean and linear commit history, as it introduces commits from another branch with different commit messages and timestamps. 2. git blameView the revision history of a file, showing who last modified each line and when. It’s a useful tool for tracking changes and identifying the author and commit associated with each line of code in a file. When git blame can be useful: Bug Tracking: When trying to identify the source of a bug, you can trace back commits. Security Auditing: For security-conscious projects, git blame can be employed to trace when and by whom security-related changes were made, aiding in security audits and investigations. HacksWhen you are interested in finding the origin for lines 40-60 for file foobar: git blame -L 40,+21 foo A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its parents, using commit^! notation: git blame -C -C -f $commit^! -- foo git annotate The only difference between this command and git blame is that they use slightly different output formats. 3. git bisectUse binary search to find the commit that introduced a bug in your code. This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:1","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#hacks"},{"categories":["git","learning"],"content":" Uncommon git commandsAnyone who ever used git, will know this flow (and yes, with deep understanding of how git works, you won’t use other commands). sequenceDiagram participant Working Tree participant Staging Area participant Local Repo Working Tree -\u003e\u003eStaging Area: git add Staging Area -\u003e\u003eLocal Repo: git commit Local Repo -\u003e\u003eStaging Area: git reset Staging Area -\u003e\u003eWorking Tree: git restore --staged Local Repo -\u003e\u003eWorking Tree: git checkout participant Remote Local Repo -\u003e\u003eRemote: git push Remote -\u003e\u003eLocal Repo: git pull Even though there are some hidden gems that will make your life easier: 1. git stashStash the changes in a dirty working directory away when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push Tip You can interactively choose which changes to stash when using git stash -p 2. git cherry-pickApply the changes introduced by some existing commits to your repo. git cherry-pick is a very useful command to use in case you want to have some commits to be picked by reference and added to the current working HEAD. git cherry-pick can be useful for: Applying hotfixs: When you want to apply a hotfix in one branch to other branches. Selectively merging changes: When you want to merge only specific commits from one branch into another, rather than merging the entire branch. Reordering commits: You can use git cherry-pick to reorder commits in the target branch or even apply commits from different parts of the source branch to achieve a specific commit order. Don't use it if:- When commits depend on each other: If the commits you want to cherry-pick have dependencies on other commits in the source branch, cherry-picking them individually can lead to errors or missing context Maintaining a clean commit history: Cherry-picking can lead to a less clean and linear commit history, as it introduces commits from another branch with different commit messages and timestamps. 2. git blameView the revision history of a file, showing who last modified each line and when. It’s a useful tool for tracking changes and identifying the author and commit associated with each line of code in a file. When git blame can be useful: Bug Tracking: When trying to identify the source of a bug, you can trace back commits. Security Auditing: For security-conscious projects, git blame can be employed to trace when and by whom security-related changes were made, aiding in security audits and investigations. HacksWhen you are interested in finding the origin for lines 40-60 for file foobar: git blame -L 40,+21 foo A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its parents, using commit^! notation: git blame -C -C -f $commit^! -- foo git annotate The only difference between this command and git blame is that they use slightly different output formats. 3. git bisectUse binary search to find the commit that introduced a bug in your code. This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:1","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#b3-git-bisectb"},{"categories":["git","learning"],"content":" Uncommon git commandsAnyone who ever used git, will know this flow (and yes, with deep understanding of how git works, you won’t use other commands). sequenceDiagram participant Working Tree participant Staging Area participant Local Repo Working Tree -\u003e\u003eStaging Area: git add Staging Area -\u003e\u003eLocal Repo: git commit Local Repo -\u003e\u003eStaging Area: git reset Staging Area -\u003e\u003eWorking Tree: git restore --staged Local Repo -\u003e\u003eWorking Tree: git checkout participant Remote Local Repo -\u003e\u003eRemote: git push Remote -\u003e\u003eLocal Repo: git pull Even though there are some hidden gems that will make your life easier: 1. git stashStash the changes in a dirty working directory away when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push Tip You can interactively choose which changes to stash when using git stash -p 2. git cherry-pickApply the changes introduced by some existing commits to your repo. git cherry-pick is a very useful command to use in case you want to have some commits to be picked by reference and added to the current working HEAD. git cherry-pick can be useful for: Applying hotfixs: When you want to apply a hotfix in one branch to other branches. Selectively merging changes: When you want to merge only specific commits from one branch into another, rather than merging the entire branch. Reordering commits: You can use git cherry-pick to reorder commits in the target branch or even apply commits from different parts of the source branch to achieve a specific commit order. Don't use it if:- When commits depend on each other: If the commits you want to cherry-pick have dependencies on other commits in the source branch, cherry-picking them individually can lead to errors or missing context Maintaining a clean commit history: Cherry-picking can lead to a less clean and linear commit history, as it introduces commits from another branch with different commit messages and timestamps. 2. git blameView the revision history of a file, showing who last modified each line and when. It’s a useful tool for tracking changes and identifying the author and commit associated with each line of code in a file. When git blame can be useful: Bug Tracking: When trying to identify the source of a bug, you can trace back commits. Security Auditing: For security-conscious projects, git blame can be employed to trace when and by whom security-related changes were made, aiding in security audits and investigations. HacksWhen you are interested in finding the origin for lines 40-60 for file foobar: git blame -L 40,+21 foo A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its parents, using commit^! notation: git blame -C -C -f $commit^! -- foo git annotate The only difference between this command and git blame is that they use slightly different output formats. 3. git bisectUse binary search to find the commit that introduced a bug in your code. This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:1","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#automating-git-bisect"},{"categories":["git","learning"],"content":" Uncommon git commandsAnyone who ever used git, will know this flow (and yes, with deep understanding of how git works, you won’t use other commands). sequenceDiagram participant Working Tree participant Staging Area participant Local Repo Working Tree -\u003e\u003eStaging Area: git add Staging Area -\u003e\u003eLocal Repo: git commit Local Repo -\u003e\u003eStaging Area: git reset Staging Area -\u003e\u003eWorking Tree: git restore --staged Local Repo -\u003e\u003eWorking Tree: git checkout participant Remote Local Repo -\u003e\u003eRemote: git push Remote -\u003e\u003eLocal Repo: git pull Even though there are some hidden gems that will make your life easier: 1. git stashStash the changes in a dirty working directory away when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit. The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git stash push Tip You can interactively choose which changes to stash when using git stash -p 2. git cherry-pickApply the changes introduced by some existing commits to your repo. git cherry-pick is a very useful command to use in case you want to have some commits to be picked by reference and added to the current working HEAD. git cherry-pick can be useful for: Applying hotfixs: When you want to apply a hotfix in one branch to other branches. Selectively merging changes: When you want to merge only specific commits from one branch into another, rather than merging the entire branch. Reordering commits: You can use git cherry-pick to reorder commits in the target branch or even apply commits from different parts of the source branch to achieve a specific commit order. Don't use it if:- When commits depend on each other: If the commits you want to cherry-pick have dependencies on other commits in the source branch, cherry-picking them individually can lead to errors or missing context Maintaining a clean commit history: Cherry-picking can lead to a less clean and linear commit history, as it introduces commits from another branch with different commit messages and timestamps. 2. git blameView the revision history of a file, showing who last modified each line and when. It’s a useful tool for tracking changes and identifying the author and commit associated with each line of code in a file. When git blame can be useful: Bug Tracking: When trying to identify the source of a bug, you can trace back commits. Security Auditing: For security-conscious projects, git blame can be employed to trace when and by whom security-related changes were made, aiding in security audits and investigations. HacksWhen you are interested in finding the origin for lines 40-60 for file foobar: git blame -L 40,+21 foo A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with: git log --diff-filter=A --pretty=short -- foo and then annotate the change between the commit and its parents, using commit^! notation: git blame -C -C -f $commit^! -- foo git annotate The only difference between this command and git blame is that they use slightly different output formats. 3. git bisectUse binary search to find the commit that introduced a bug in your code. This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:1","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#b4-git-archiveb"},{"categories":["git","learning"],"content":" Useful git scenarios Creating an orphan branchAn orphan branch is a branch that starts with no commit history but exists alongside your main development branch. It can be useful in specific situations: Separate Documentation or Website: like this blog website, it has 2 branches one for writing markdown files, and the other orphan branch for the generated website. Starting a New Project: if for example you’re creating a full stack application and you want to make the server side and front side in one big repo (which I don’t recommend) you can have 2 branches, main one and the orphan frontend (coz you know backend comes first). git checkout --orphan \u003cbranch-name\u003e git rm -rf . ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:2","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#useful-git-scenarios"},{"categories":["git","learning"],"content":" Useful git scenarios Creating an orphan branchAn orphan branch is a branch that starts with no commit history but exists alongside your main development branch. It can be useful in specific situations: Separate Documentation or Website: like this blog website, it has 2 branches one for writing markdown files, and the other orphan branch for the generated website. Starting a New Project: if for example you’re creating a full stack application and you want to make the server side and front side in one big repo (which I don’t recommend) you can have 2 branches, main one and the orphan frontend (coz you know backend comes first). git checkout --orphan git rm -rf . ","date":"2023-10-16","objectID":"/posts/git_hacks/:2:2","series":[],"tags":["git","automation"],"title":"Git for hackers","uri":"/posts/git_hacks/#creating-an-orphan-branch"},{"categories":["hacking","learning"],"content":"Does your recipient see the email or not ?","date":"2023-03-02","objectID":"/posts/email_tracking/","series":[],"tags":[],"title":"How email tracking works ?","uri":"/posts/email_tracking/"},{"categories":["hacking","learning"],"content":"Have you ever wondered how could someone knows if you read their email or not ? ","date":"2023-03-02","objectID":"/posts/email_tracking/:0:0","series":[],"tags":[],"title":"How email tracking works ?","uri":"/posts/email_tracking/#"},{"categories":["hacking","learning"],"content":" How it works ?When you click a link some where over the internet, a request is sent to some server where it’s being processed. That’s exactly what happens here. That’s if you clicked a link, but I am still tracked even though I didn’t click any links! Imagine this, when you load a website client requests some data from the server and automatically makes some requests even though you just did one single GET request (initial request). When you open up some email with a embedded image, a request is made through some proxy. Since we don’t have control over the image(link), we can create our server to process it and notify read to us. And there is a trick to hide that image by sending 1X1 pixel image. ","date":"2023-03-02","objectID":"/posts/email_tracking/:1:0","series":[],"tags":[],"title":"How email tracking works ?","uri":"/posts/email_tracking/#how-it-works-"},{"categories":["hacking","learning"],"content":" ImplementationI am going to build the server in nodejs for simplicity. ","date":"2023-03-02","objectID":"/posts/email_tracking/:2:0","series":[],"tags":[],"title":"How email tracking works ?","uri":"/posts/email_tracking/#implementation"},{"categories":["hacking","learning"],"content":" Requirements I am using the http package to create a server, I could have used express but it’s overkill for this example. dotenv to save environment secrets. twilio for api, could have used the vanila https package to send the request. And finally when the email is read! ","date":"2023-03-02","objectID":"/posts/email_tracking/:2:1","series":[],"tags":[],"title":"How email tracking works ?","uri":"/posts/email_tracking/#requirements"},{"categories":["Problem Solving"],"content":"To be good at something, it requires you to practice a lot. Problem-solving isn't any different - it just requires a bit more creativity, patience, and probably a Math degree. (just kidding!)","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/"},{"categories":["Problem Solving"],"content":"To be good at something, it requires you to practice a lot. Problem-solving isn’t any different - it just requires a bit more creativity, patience, and probably a Math degree. (just kidding!). ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:0:0","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#"},{"categories":["Problem Solving"],"content":" My 30 days challengeSo you heard about it. Since I am so bad at solving “Problems” (can’t even solve my non-technical ones), I’ve decided to put myself in the thick of things. The idea of the n days challenge, is consistency! “Take on only as much as you can do of good deeds, for the best of deeds is that which is done consistently, even if it is little” – Prophet Muhammed - peace be upon him. I am going to share my little journey day by day, moving from solving easy problems to hard ones, and maybe I am going a step forward. In n days (30), I am going to solve at least one problem a day (I can do more!). Don't lose track! Make a Github repo to keep track of your progress. There are many tools to help keeping track of problems/solutions, one way to go is to use LeetHub. In the upcoming sections, I will list multiple resources and tools (I do/don’t use) that I think they may help you get your hand dirty! ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:1:0","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#my-30-days-challenge"},{"categories":["Problem Solving"],"content":" MotivationI suck at problem solving, like really I am bad at this (It’s not my point of strength). But why ? Why you should be good at problem solving ?, The system is courrpted my friend, almost all companies thinks that a good problem solver is the one to choose even if they(he/she) are trash in the job itself. I am aganist the fact you have to memorize and study stuff only for the interview and you will never use in the job!. The hate isn't for nothing! Check this out : Coding Interviews are Broken ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:2:0","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#motivation"},{"categories":["Problem Solving"],"content":" Problem solving isn’t just for interviewsYes, even though I hate doing problems for getting a job, but it’s undoubtedly the current system (liked or not) to get a job. Problem solving unlocks you mind and creativity for complex problems, adding solutions to problems you never knew how they’re solved. A challenge for yourself, sometimes fun but most of the time pain in the ass. Solving a problem makes you happy, you get some Dopamine at the end. ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:2:1","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#problem-solving-isnt-just-for-interviews"},{"categories":["Problem Solving"],"content":" ProgressI will commit on doing problem solving everyday for 30 days (2 Problems/day), I am going to begin with this from leetcode. I am going to be following 3 aspects: I can solve any problem, anything comes with practice. I will commit at least 1-2 hours/day on solving problems for the next 30days, starting from today. I will never give up on any problem that is put at me, I will ask for help if needed. ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:3:0","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#progress"},{"categories":["Problem Solving"],"content":" SimplicityUnderstanding the basic approach by mastering smallest things first, that’s what big tech do!. For example, you won’t be able to solve a problem that requires DFS without understanding how queues works. You’ve to move your way from smallest building up to the largest things, and if you got stuck just break things into the smallest again. ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:3:1","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#simplicity"},{"categories":["Problem Solving"],"content":" Before solving a problem Understand the problem clearly. Ask questions. Not all questions might be applicable to your problem, but it is important to ask questions to yourself at this stage before you go ahead trying to solve the problem. Visualize That is where a pen and a paper/notebook (or) a white board comes into play. Try to visualize the problem at hand and try to picturize the problem. That is also one of the steps to make sure that you understand the problem clearly. ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:3:2","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#before-solving-a-problem"},{"categories":["Problem Solving"],"content":" ResourcesSo you want to start, but you don’t know where to go!. Let me tell you that practicing is the key, but practicing without a good base (basics) and good plan is waste of time. Absolute Beginners So you have to be really good at the basics (Data Structure and Algorithms). A great course by Treehouse which is available on freecodecamp. Advanced Learn Graph Algorithms A full course from a to z (from a google engineer) Academic (if you prefer book and all theory) The great MIT courses MIT 6.006 Introduction to Algorithms, Spring 2020 MIT 6.006 Introduction to Algorithms, Fall 2011 ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:4:0","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#resources"},{"categories":["Problem Solving"],"content":" Roadmap I am going to followI am going to watch the MIT Fall 2011 course + doing this roadmap from NeetCode. ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:4:1","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#roadmap-i-am-going-to-follow"},{"categories":["Problem Solving"],"content":" Make the best of the itTo make the best of the map, you will have to practice everyday, depends on your progress, I would recommend to do at least 2 problems/day with fully understanding the problem and the solution. ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:5:0","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#make-the-best-of-the-it"},{"categories":["Problem Solving"],"content":" Problem solving is funThere are many websites to do problem solving: Leetcode is the most popular when preparing for interviews. HacerRank is also well known for technical assessments and remote interviews. For me I like Codingame, it’s really fun: Clash of code : online coding with others. Practice problems. ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:6:0","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#problem-solving-is-fun"},{"categories":["Problem Solving"],"content":" Stuck ?Don’t hesitate to ask for help if you got stuck but first try to google, for god sake! ","date":"2023-02-16","objectID":"/posts/problem_solving_for_absolute_noobs/:7:0","series":null,"tags":["problem solving","leetcode","codingame"],"title":"My Way For Problem solving!","uri":"/posts/problem_solving_for_absolute_noobs/#stuck-"},{"categories":["Development"],"content":" Getting StartedBefore Starting, it’s a good idea to install a Custom ROM for your old device just to get the best out of it. Head to XDA and search for your device. But why you might ask ? The installed custom ROM would bring you newer Android version + new kernel version. (not always) Root access (more control in general). In my case, I am using SM-T585 which came with Android 8.1 and later on I upgraded to 9. ","date":"2022-12-14","objectID":"/posts/android_setup_dev/:1:0","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#getting-started"},{"categories":["Development"],"content":" RequirementsMake sure you have at least 4gb(more than enough) of free space to install all the required apps : Termux : used as a terminal emulator. AnLinux : to install a linux distro without root access. Note : AnLinux is just an option for those who don’t want to navigate the github repo (easy mode). ","date":"2022-12-14","objectID":"/posts/android_setup_dev/:2:0","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#requirements"},{"categories":["Development"],"content":" Choosing a distroOpen AnLinux and choose your favourite distro, I recommend using fedora since it has the most up-to-date packages. Copy the install command and open termux and paste. When the installation is done you can start fedora by ./start-fedora.sh ","date":"2022-12-14","objectID":"/posts/android_setup_dev/:3:0","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#choosing-a-distro"},{"categories":["Development"],"content":" Setup The EnvironmentIf you reached this point, you know what to do next :D, but I am going to continue as a reference for future me. Update the system : dnf upgrade. Install essential packages : dnf install wget git unzip gcc g++ python3 pip net-tools openssh psmisc rsync fuse-sshfs Install Workspace packages : dnf install nvim tmux zsh Change the default shell to zsh. Add aliases. Have fun hacking :D ","date":"2022-12-14","objectID":"/posts/android_setup_dev/:4:0","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#setup-the-environment"},{"categories":["Development"],"content":" Extras","date":"2022-12-14","objectID":"/posts/android_setup_dev/:5:0","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#extras"},{"categories":["Development"],"content":" Termux Customizations Download this addon Change the theme and font by hold pressing -\u003e style -\u003e choose color/ choose font For me, I am using Source Code Pro font with Wild Cherry color. ","date":"2022-12-14","objectID":"/posts/android_setup_dev/:5:1","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#termux-customizations"},{"categories":["Development"],"content":" System HackSince I use vim, I always swap ESC with CAPS_LOCK, but on Android I couldn’t swap the physical keyboard button so I changed the CAPS_LOCK to act like ESC lol. Here is how I did it: Open the normal termux session. Install vim or any text editor. Mount the system to Write : mount -o remount,rw /system Edit /system/usr/keylayout/Generic.kl and search for CAPS_LOCK and change it to ESCAPE Mount the system to Read only : mount -o remount,ro /system ","date":"2022-12-14","objectID":"/posts/android_setup_dev/:5:2","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#system-hack"},{"categories":["Development"],"content":" Some useful aliasesI have some aliases for easier navigation and nice overall experience. alias v=\"nvim\" alias install=\"dnf install\" alias neo=\"neofetch\" alias mkd=\"mkdir -p\" alias vc=\"nvim ~/.config/nvim/init.lua\" alias python=\"python3\" ","date":"2022-12-14","objectID":"/posts/android_setup_dev/:5:3","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#some-useful-aliases"},{"categories":["Development"],"content":" Connect to the network using SSHI am using SSH to connect to my main machine on the network : ssh none@192.168.1.6, and scp to upload/download content. # note the IP might change down () { scp -r none@192.168.1.6:$1 $2 } up () { scp -r $1 none@192.168.1.6:$2 } ","date":"2022-12-14","objectID":"/posts/android_setup_dev/:5:4","series":null,"tags":["android","termux","linux","development"],"title":"Setup old android tablet for development","uri":"/posts/android_setup_dev/#connect-to-the-network-using-ssh"},{"categories":["Github"],"content":" Using the github website Probably this is the easiest way to download files from github, by navigating to the file on github and click on the download button. Unfortenitaly, it’s not the fastest, you will have to move the file to the desired destination and doesn’t work for raw files like (txt and .ext). ","date":"2022-11-26","objectID":"/posts/github-dl/:1:0","series":null,"tags":["github","linux"],"title":"How to download files and directories from github","uri":"/posts/github-dl/#using-the-github-website"},{"categories":["Github"],"content":" Using wget/curlNow we talk :D, here’s a bash function (add to your alias section) I wrote to automate the download process by using the URL which contains blob keyword. Note: you know what to do to make it work with cURL :D #!/bin/bash gd () { SEARCH=\"\\/blob\\/\" replace=\"\\/raw\\/\" result=`echo $1 | sed -e \"s/$SEARCH/$replace/g\"` wget $result } ","date":"2022-11-26","objectID":"/posts/github-dl/:2:0","series":null,"tags":["github","linux"],"title":"How to download files and directories from github","uri":"/posts/github-dl/#using-wgetcurl"},{"categories":["Github"],"content":" Downloading directoriesGitHub doesn’t support git-archive (a git feature to download specific folders). However, it supports a variety of Subversion features, one of which we can use. Subversion is a VC (Version Control) just like git. Make sure you have subversion installed, for arch : sudo pacman -S subversion modify_url () { SEARCH=\"\\/tree\\/\\w\\+\\/\" replace=\"\\/trunk\\/\" echo $1 | sed -e \"s/$SEARCH/$replace/g\" } dgd () { url=`modify_url $1` svn export $url } ","date":"2022-11-26","objectID":"/posts/github-dl/:3:0","series":null,"tags":["github","linux"],"title":"How to download files and directories from github","uri":"/posts/github-dl/#downloading-directories"},{"categories":["Linux"],"content":" What is mpd ?MPD (Music Player Daemon) is an audio player, used to play audio tracks, organize playlists with some database for musics. In order to interface with it, a client is needed (in our case (ncmpcpp)[https://rybczak.net/ncmpcpp/] is used). ","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:1:0","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#what-is-mpd-"},{"categories":["Linux"],"content":" Installation Install mpd and ncmpcpp on ArchLinux : sudo pacman -S mpd ncmpcpp Install mpDris2 (provides MPRIS 2 support to mpd): yay -S mpdris2 ","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:2:0","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#installation"},{"categories":["Linux"],"content":" Setup","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:3:0","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#setup"},{"categories":["Linux"],"content":" AutostartThere are multiple ways to auto-run mpd and mpdris2 : Autostart with systemd : systemctl enable/start --user mpd/mpDris2 Add to your .xinitrc ","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:3:1","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#autostart"},{"categories":["Linux"],"content":" Configuration","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:4:0","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#configuration"},{"categories":["Linux"],"content":" MPDIn order for MPD to be able to playback audio, ALSA, optionally with PulseAudio, must be set up and working, be default Since we’re going with per-user setup, the default path for the config file is : ~/.config/mpd/mpd.conf These are some of the most commonly used configuration options (we’re not going to use them all): pid_file - The file where MPD stores its process ID db_file - The music database state_file - MPD’s current state is noted here playlist_directory - The directory where playlists are saved into music_directory - The directory that MPD scans for music sticker_file - The sticker database auto_update_depth - The depth of the directories it should scan, “0” means all. To make the config work, a ~/.mpd/ must be created and ~/.mpd/playlists/. music_directory \"~/Music\" playlist_directory \"~/.mpd/playlists\" db_file \"~/.mpd/database\" log_file \"~/.mpd/log\" pid_file \"~/.mpd/pid\" state_file \"~/.mpd/state\" sticker_file \"~/.mpd/sticker.sql\" restore_paused \"yes\" auto_update \"yes\" auto_update_depth \"0\" audio_output { type \"pulse\" name \"pulse audio\" } audio_output { type \"fifo\" name \"my_fifo\" path \"/tmp/mpd.fifo\" format \"44100:16:2\" } ","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:4:1","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#mpd"},{"categories":["Linux"],"content":" ncmpcpp ncmpcpp is a very cool TUI with some features like regular expressions for library searches, extended song format, items filtering, the ability to sort playlists, and a local filesystem browser. To use it, a functional mpd must be present on the system since ncmpcpp/mpd work together in a client/server relationship (that’s why it should run on the same port as mpd). mpd_host = \"127.0.0.1\" mpd_port = 6600 mpd_connection_timeout = \"5\" mpd_crossfade_time = \"5\" mpd_music_dir = ~/Music # General colors_enabled = \"yes\" enable_window_title = \"yes\" main_window_color = \"default\" execute_on_song_change = notify-send \"Playing..\" \"$(mpc --format '%title% \\n%artist%' current)\" autocenter_mode = \"yes\" centered_cursor = \"yes\" user_interface = \"classic\" # Progess Bar progressbar_look = \"━━╸\" progressbar_color = \"white\" progressbar_elapsed_color=\"green\" # UI Visibility header_visibility = \"no\" statusbar_visibility = \"no\" titles_visibility = \"no\" startup_screen = \"playlist\" #startup_slave_screen = \"visualizer\" locked_screen_width_part = 50 ask_for_locked_screen_width_part = no # UI Appearance now_playing_prefix = \"$b$3\" now_playing_suffix = \"$/b$9\" song_status_format = \"$7%t\" song_list_format = \"$8%a - %t$R $5%l\" song_columns_list_format = \"(3f)[green]{} (60)[magenta]{t|f:Title} (1)[]{}\" song_library_format = {% raw %}{{ %a - %t } (%b)}|{%f}{% endraw %} song_window_title_format = \"Music\" # Visualizer visualizer_data_source = \"/tmp/mpd.fifo\" visualizer_output_name = \"my_fifo\" visualizer_in_stereo = \"yes\" visualizer_type = \"ellipse\" visualizer_look = ●● visualizer_color = \"33,39,63,75,81,99,117,153,189\" visualizer_fps = \"60\" Notes: On execute_on_song_change: mpc is used to get some metadata about the running track. ","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:4:2","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#ncmpcpp"},{"categories":["Linux"],"content":" PolybarTo show the current music and get some basic music controlling on the polybar, we need to customize the polybar to add the new changes: Create a module to open up ncmpcpp when clicked: [module/music-player] type = custom/text content = \"\" content-foreground = ${color.purple} click-right = termite -t musicplayer -e \"ncmpcpp\" Create a module to sync with mpd and show current playing song. [module/mpd] type = internal/mpd host = 127.0.0.1 port = 6600 interval = 2 format-offline = \"\" label-song = \"%artist% - %title%\" label-song-maxlen = 40 icon-repeat = \"\" toggle-on-foreground = ${color.green} toggle-off-foreground = ${color.red} Create a module to add basic music control. [module/mpd_control] type = internal/mpd host = 127.0.0.1 port = 6600 interval = 1 format-online = \u003cicon-prev\u003e\u003ctoggle\u003e\u003cicon-next\u003e format-offline = \u003clabel-offline\u003e label-offline = \"󰝛 Offline\" icon-play = \" %{T2} \" icon-pause = \" %{T2} \" icon-stop = \" %{T2} \" icon-prev = \"%{T2} \" icon-next = \" %{T2}\" format-offline-foreground = ${color.grey} icon-play-foreground = ${color.lime} icon-pause-foreground = ${color.lime} icon-stop-foreground = ${color.lime} icon-prev-foreground = ${color.blue} icon-next-foreground = ${color.blue} toggle-on-foreground = ${color.green} toggle-off-foreground = ${color.red} Putting all together. It’s up to you on how to add to the bar, but for me I am having it as a separate bar section. [bar/section2] monitor-strict = false override-redirect = false bottom = false fixed-center = true width = 21.5% height = 40 offset-x = 43.5% offset-y = 10 background = ${color.bg-alt} foreground = ${color.fg} radius = 6 line-size = 2 line-color = ${color.blue} border-size = 2 border-color = ${color.bg} padding = 2 module-margin-left = 0 module-margin-right = 0 font-0 = \"banana:size=6;2\" font-1 = \"Font Awesome 6 Free Solid:size=10;3\" modules-left = music-player modules-center = mpd modules-right = mpd_control separator = dim-value = 1.0 cursor-click = pointer cursor-scroll = ns-resize ","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:4:3","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#polybar"},{"categories":["Linux"],"content":" mpDris2To test if mpdris2 works try to stop the current track using playerctl as : playerctl stop -p \"mpd\", if everything works fine you can create some keybindings to control mpd. In my case I am using sxhkd: # pause everything super + m pactl set-sink-mute 0 toggle super + shift + p playerctl -p \"mpd\" play-pause ","date":"2022-11-23","objectID":"/posts/setup_mpd_bspwm/:4:4","series":null,"tags":["mpd","polybar","bspwm","linux"],"title":"Full MPD setup on BSPWM + Polybar","uri":"/posts/setup_mpd_bspwm/#mpdris2"},{"categories":["Linux"],"content":" Why you should use tmux ?Tmux is a terminal multiplexer, it lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and re-attach them to a different terminal. It also allows you to have multiple panes open at the same time, each with their own shell running, with a single SSH connection (yes, it supports SSH). Not only that, you can also have multiple windows open at the same time, a bit like tabs with more panes in them. ","date":"2022-08-10","objectID":"/posts/tmux_setup/:1:0","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#why-you-should-use-tmux-"},{"categories":["Linux"],"content":" How to install ?Many platforms provide prebuilt packages of tmux, although these are often out of date. Details of the commands to discover and install these can be found in the documentation for the platform package management tools, for example: Platform Install Command Arch Linux pacman -S tmux Debian or Ubuntu apt install tmux Fedora dnf install tmux ","date":"2022-08-10","objectID":"/posts/tmux_setup/:2:0","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#how-to-install-"},{"categories":["Linux"],"content":" ConfigurationFirst create a config file as ~/.tmux.conf, this file holds all the configurations. ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:0","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#configuration"},{"categories":["Linux"],"content":" SourcingThe first thing to do is sourcing the config file by adding this line : bind r source-file ~/.tmux.conf, this makes sure the source file is sourced by pressing prefix + r ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:1","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#sourcing"},{"categories":["Linux"],"content":" PrefixWhat is the prefix, you ask ? Prefix is similar to vim’s leader key and it’s so important in tmux as almost any command is set behind a prefix. Tmux uses C-b. Let’s change it to something nice. # remap prefix from 'C-b' to 'C-w' unbind C-b set-option -g prefix C-w bind-key C-w send-prefix ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:2","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#prefix"},{"categories":["Linux"],"content":" MouseBy default, the mouse is disabled in tmux. We can use the mouse to scroll and resize panes. To enable it: # pane scrolling set -g mouse on ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:3","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#mouse"},{"categories":["Linux"],"content":" ColorsAfter launching tmux for the first time, you will notice that the colors are messed up, to fix it: set-option -ga terminal-overrides \",xterm-256color:Tc\" set -g default-terminal \"screen-256color\" ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:4","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#colors"},{"categories":["Linux"],"content":" SplittingOne of the great features you use tmux for is : window splitting. To split use Prefix + h for horizontal split, and Prefix + v for vertical split. # window splitting bind v split-window -h bind h split-window -v unbind '\"' unbind % ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:5","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#splitting"},{"categories":["Linux"],"content":" SwitchingYou can switch either between panes or windows in the same tmux session, to easily switch panes by pressing Prefix + w while holding Ctrl : # pane switching bind ^w select-pane -t :.+ To switch between windows : # window switching bind -r C-h select-window -t :- ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:6","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#switching"},{"categories":["Linux"],"content":" PluginsInstalling TPM (Tmux Plugin Manager) To install TPM, you need to: Git clone TPM to a HOME directory (~/.tmux/plugins/tpm) Add any plugins with set -g @plugin 'YOUR/PLUGIN' in your tmux config file. Point the run command to the TPM repository location (by default it points to ~/.tmux/tpm/tpm). ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:7","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#plugins"},{"categories":["Linux"],"content":" ThemesSo we installed TPM, now we can add some plugins for nicer themes, I like the dracula theme :D : # dracula plugin # only show these set -g @dracula-plugins \"cpu-usage ram-usage\" set -g @dracula-show-left-icon session # plugins set -g @plugin 'tmux-plugins/tmux-sensible' set -g @plugin 'dracula/tmux' ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:8","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#themes"},{"categories":["Linux"],"content":" ExtraAbove are the basic customizations, however there are still more configurations we haven’t gone through. Feel free to check the tmux wiki page for more advanced configurations. # speed it up in neovim set -sg escape-time 0 # don't rename windows automatically set-option -g allow-rename off # index start with 1 set -g base-index 1 setw -g pane-base-index 1 set -g renumber-windows on # increase history : default = 2000 lines set-option -g history-limit 5000 # jump to marked location bind \\` switch-client -t'{marked}' ","date":"2022-08-10","objectID":"/posts/tmux_setup/:3:9","series":null,"tags":["tmux","linux","rice"],"title":"How to setup tmux for advanced users ?","uri":"/posts/tmux_setup/#extra"},{"categories":null,"content":" Once a wise man said: “Of course it is happening inside your head, Harry, but why on earth should that mean that it is not real?” -Dumbledore ","date":"2019-08-02","objectID":"/about/:0:0","series":null,"tags":null,"title":"About me","uri":"/about/#"},{"categories":null,"content":" Whoami?“You are not a drop in the ocean. You are the entire ocean in a drop.” ","date":"2019-08-02","objectID":"/about/:1:0","series":null,"tags":null,"title":"About me","uri":"/about/#whoami"},{"categories":null,"content":" Why I made this ?My personal void to share some thoughts and ideas, sometimes it might get really silly, funny or technical (who knows). Also since sharing is caring, I wanted to explain my thoughts in a simple way that my future me could understand, coz I easily forget things. “The difference between school and life? In school, you’re taught a lesson and then given a test. In life, you’re given a test that teaches you a lesson.” - Tom Bodett ","date":"2019-08-02","objectID":"/about/:2:0","series":null,"tags":null,"title":"About me","uri":"/about/#why-i-made-this-"},{"categories":null,"content":" SkillsWhile I don’t believe that one’s skills can be accurately measured by the number of programming languages one knows, but rather by the number of problems one has solved/faced, I would like to share some of the programming languages I have experience with based on my GitHub projects. Additionally, I am proficient at switching between languages seamlessly Languages that I know: TypeScript Go Python Java Ruby Bash C/C++ ","date":"2019-08-02","objectID":"/about/:3:0","series":null,"tags":null,"title":"About me","uri":"/about/#skills"},{"categories":null,"content":" ProjectsI have made contributions to various open source projects, and I’d like to share a selection of my top projects, while all my projects can be found Here. ","date":"2019-08-02","objectID":"/about/:4:0","series":null,"tags":null,"title":"About me","uri":"/about/#projects"},{"categories":null,"content":" Gimme Graduation-ProjectGimme is an application that helps users to reach unoffical stores and get their items by tusted users, “from the people to the people”. It’s built with NodeJS, with lots of integrations and microservices like AWS S3, Firebase FCM, and more. ","date":"2019-08-02","objectID":"/about/:4:1","series":null,"tags":null,"title":"About me","uri":"/about/#gimmehttpsgithubcomayehia0gimme-graduation-project"},{"categories":null,"content":" TrashWell, that was a fun project to make, Trash is a programming language (coz, why not) written for my interpreter in Go. ","date":"2019-08-02","objectID":"/about/:4:2","series":null,"tags":null,"title":"About me","uri":"/about/#trashhttpsgithubcomayehia0trash"},{"categories":null,"content":" Bank SystemA very simple bank system, made to master the backend technologies such as: docker, Kubernetes, gRPC, and Postgres, I deployed it to AWS (free tier) but I exceeded the limit lol. Features: Manages money transfer between acccounts (Avoiding deadlock) Using Sqlc to generate code. Using migrate to have versions of the database schemas. Using paseto for token based authentication : Why it’s better than JWT? ","date":"2019-08-02","objectID":"/about/:4:3","series":null,"tags":null,"title":"About me","uri":"/about/#bank-systemhttpsgithubcomayehia0bank"},{"categories":null,"content":" HangmanA beautiful CLI Hangman game, over SSH with multiplayer support and more. ","date":"2019-08-02","objectID":"/about/:4:4","series":null,"tags":null,"title":"About me","uri":"/about/#hangmanhttpsgithubcomayehia0hangman"},{"categories":null,"content":" SoundCloud-dlA CLI tool to download SoundCloud tracks and playlists, written in Go. Blazingly Fast Download tracks by URL. Search in-app and download. Save tracks with tags/metadata : Artwork Image, Creation Date, Author Name. Multiple formats and qualities. Download playlists. ","date":"2019-08-02","objectID":"/about/:4:5","series":null,"tags":null,"title":"About me","uri":"/about/#soundcloud-dlhttpsgithubcomayehia0soundcloud-dl"},{"categories":null,"content":" Quran-In-TerminalRead the holy quran in your terminal, written in Go. Supports multiple languages (AR/EN). Has 2 versions with many features like Ayah highlighting, searching and bookmarking. ","date":"2019-08-02","objectID":"/about/:4:6","series":null,"tags":null,"title":"About me","uri":"/about/#quran-in-terminalhttpsgithubcomayehia0quran-go"},{"categories":null,"content":" HealthLifeHealthLife is a MEAN stack application used to keep track of what you have eaten through out the day. The application was made as an graduation project for my Internship in NTI. I used Angular for the frontend. (They made me do it!). NodeJS for the backend. The application has admin dashboard and user pages. ","date":"2019-08-02","objectID":"/about/:4:7","series":null,"tags":null,"title":"About me","uri":"/about/#healthlifehttpsgithubcomayehia0healthlife"},{"categories":null,"content":" ImageToolKitImageToolKit is GUI application which implements the image processing functionalities written in python (for a college course), the app uses: OpenCV and numpy to work with images (filters, colors, etc) matplotlib to create and display graphs. PyQt5 for the GUI. ","date":"2019-08-02","objectID":"/about/:4:8","series":null,"tags":null,"title":"About me","uri":"/about/#imagetoolkithttpsgithubcomayehia0imagetoolkit"},{"categories":null,"content":" Contacts Email: mail ","date":"2019-08-02","objectID":"/about/:5:0","series":null,"tags":null,"title":"About me","uri":"/about/#contacts"}]